{"version":3,"sources":["index.js"],"names":["updateImageOrientation","readExifData","orient","default","require","Buffer","ExifImage","file","options","resolve","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","buf","from","then","shouldNotAddExifData","type","mimeType","image","error","exifData","orientation","Orientation","exifWidth","exif","ExifImageWidth","exifHeight","ExifImageHeight","width","height","ctx","img","x","y","transform","drawImage"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n/* global Uint8Array, FileReader */\n\nconst {Buffer} = require('safe-buffer');\nconst {ExifImage} = require('exif');\n\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @param {Object} options\n* @param {boolean} options.shouldNotAddExifData\n* @returns {Promise<Object>}\n*/\nexport function updateImageOrientation(file, options = {}) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = function onload() {\n      const arrayBuffer = reader.result;\n      const buf = Buffer.from(arrayBuffer);\n\n      resolve(buf);\n    };\n  })\n    .then((buf) => {\n      if (options.shouldNotAddExifData) {\n        return buf;\n      }\n\n      return readExifData(file, buf);\n    });\n}\n\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\nexport function readExifData(file, buf) {\n  return new Promise((resolve) => {\n    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n    if (file && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {\n      /* eslint-disable no-new */\n      new ExifImage({image: buf}, (error, exifData) => {\n        if (!error && exifData) {\n          file.orientation = exifData.image.Orientation;\n          file.exifWidth = exifData.exif.ExifImageWidth;\n          file.exifHeight = exifData.exif.ExifImageHeight;\n          if (file.image) {\n            file.image.orientation = exifData.image.Orientation;\n          }\n        }\n        resolve(buf);\n      });\n    }\n    else {\n      resolve(buf);\n    }\n  });\n}\n\n/* eslint-disable complexity */\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\nexport function orient(options, file) {\n  const {\n    width, height, ctx, img, orientation, x, y\n  } = options;\n\n  if (file && file.orientation && file.orientation !== 1) {\n    // explanation of orientation:\n    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n    switch (orientation) {\n      case 2:\n        // flip\n        ctx.transform(-1, 0, 0, 1, width, 0);\n        break;\n      case 3:\n      // rotateImage180\n        ctx.transform(-1, 0, 0, -1, width, height);\n        break;\n      case 4:\n      // rotate180AndFlipImage\n        ctx.transform(1, 0, 0, -1, 0, height);\n        break;\n      case 5:\n      // rotate90AndFlipImage\n        ctx.transform(0, 1, 1, 0, 0, 0);\n        break;\n      case 6:\n      // rotateImage90\n        ctx.transform(0, 1, -1, 0, height, 0);\n        break;\n      case 7:\n      // rotateNeg90AndFlipImage\n        ctx.transform(0, -1, -1, 0, height, width);\n        break;\n      case 8:\n      // rotateNeg90\n        ctx.transform(0, -1, 1, 0, 0, width);\n        break;\n      default:\n        break;\n    }\n  }\n  ctx.drawImage(img, x, y, width, height);\n}\n/* eslint-enable complexity */\n\nexport {default as processImage} from './process-image';\nexport {default as detectFileType} from './detect-filetype';\n"]}