{"version":3,"sources":["request.js"],"names":["_request","prepareOptions","options","responseType","encoding","withCredentials","jar","body","then","type","headers","resolve","doRequest","logger","r","error","response","warn","Buffer","from","statusCode","method","url","on","total","parseInt","loaded","data","length","download","emit","ProgressEvent"],"mappings":";;;;;;;;;;kBAuGwBA,Q;;AAnGxB;;;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA;;;;;AAKA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAIA,QAAQC,YAAR,KAAyB,QAAzB,IAAqCD,QAAQC,YAAR,KAAyB,MAAlE,EAA0E;AACxED,YAAQE,QAAR,GAAmB,IAAnB;AACD;;AAED,MAAIF,QAAQG,eAAZ,EAA6B;AAC3BH,YAAQI,GAAR,GAAc,IAAd;AACD;;AAED,MAAI,sBAASJ,QAAQK,IAAjB,CAAJ,EAA4B;AAC1B,WAAO,oBAAOL,QAAQK,IAAf,EACJC,IADI,CACC,UAACC,IAAD,EAAU;AACdP,cAAQQ,OAAR,CAAgB,cAAhB,IAAkCD,IAAlC;;AAEA,aAAOP,OAAP;AACD,KALI,CAAP;AAMD;;AAED,SAAO,kBAAQS,OAAR,CAAgBT,OAAhB,CAAP;AACD;;AAED;;;;;AArCA;;;;AA0CA,SAASU,SAAT,CAAmBV,OAAnB,EAA4B;AAC1B,SAAO,sBAAY,UAACS,OAAD,EAAa;AAAA,QACvBE,MADuB,GACbX,OADa,CACvBW,MADuB;;;AAG9B,QAAMC,IAAI,uBAAQZ,OAAR,EAAiB,UAACa,KAAD,EAAQC,QAAR,EAAqB;AAC9C,UAAID,KAAJ,EAAW;AACTF,eAAOI,IAAP,CAAYF,KAAZ;AACD;;AAED,UAAIC,QAAJ,EAAc;AACZA,iBAASd,OAAT,GAAmBA,OAAnB;;AAEA;AACA;AACA,YAAIA,QAAQC,YAAR,KAAyB,QAAzB,IAAqCa,SAAST,IAAT,CAAcE,IAAd,KAAuB,QAA5D,IAAwE,CAAC,sBAASO,SAAST,IAAlB,CAA7E,EAAsG;AACpGS,mBAAST,IAAT,GAAgBW,mBAAOC,IAAP,CAAYH,SAAST,IAArB,CAAhB;AACD;;AAED,YAAI,sBAASS,SAAST,IAAlB,KAA2B,CAACS,SAAST,IAAT,CAAcE,IAA9C,EAAoD;AAClDE,kBAAQ,oBAAOK,SAAST,IAAhB,EACLC,IADK,CACA,UAACC,IAAD,EAAU;AACdO,qBAAST,IAAT,CAAcE,IAAd,GAAqBA,IAArB;;AAEA,mBAAOO,QAAP;AACD,WALK,CAAR;;AAOA;AACD;;AAEDL,gBAAQK,QAAR;AACD,OArBD,MAsBK;AACH;AACAL,gBAAQ;AACNS,sBAAY,CADN;AAENlB,0BAFM;AAGNQ,mBAASR,QAAQQ,OAHX;AAINW,kBAAQnB,QAAQmB,MAJV;AAKNC,eAAKpB,QAAQoB,GALP;AAMNf,gBAAMQ;AANA,SAAR;AAQD;AACF,KAtCS,CAAV;;AAwCAD,MAAES,EAAF,CAAK,UAAL,EAAiB,UAACP,QAAD,EAAc;AAC7B,UAAMQ,QAAQC,SAAST,SAASN,OAAT,CAAiB,gBAAjB,CAAT,EAA6C,EAA7C,CAAd;AACA,UAAIgB,SAAS,CAAb;;AAEAV,eAASO,EAAT,CAAY,MAAZ,EAAoB,UAACI,IAAD,EAAU;AAC5BD,kBAAUC,KAAKC,MAAf;AACA1B,gBAAQ2B,QAAR,CAAiBC,IAAjB,CAAsB,UAAtB,EAAkC,IAAIC,uBAAJ,CAAkBL,MAAlB,EAA0BF,KAA1B,CAAlC;AACD,OAHD;AAID,KARD;AASD,GApDM,CAAP;AAqDD;;AAED;;;;;AAKe,SAASxB,QAAT,CAAkBE,OAAlB,EAA2B;AACxC,SAAOD,eAAeC,OAAf,EACJM,IADI,CACCI,SADD,CAAP;AAED","file":"request.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport request from 'request';\nimport {Buffer} from 'safe-buffer';\nimport {isBuffer} from '@webex/common';\n\nimport {detect} from '../lib/detect';\nimport ProgressEvent from '../progress-event';\n\n/**\n * @param {Object} options\n * @private\n * @returns {Promise}\n */\nfunction prepareOptions(options) {\n  if (options.responseType === 'buffer' || options.responseType === 'blob') {\n    options.encoding = null;\n  }\n\n  if (options.withCredentials) {\n    options.jar = true;\n  }\n\n  if (isBuffer(options.body)) {\n    return detect(options.body)\n      .then((type) => {\n        options.headers['content-type'] = type;\n\n        return options;\n      });\n  }\n\n  return Promise.resolve(options);\n}\n\n/**\n * @param {Object} options\n * @private\n * @returns {Promise}\n */\nfunction doRequest(options) {\n  return new Promise((resolve) => {\n    const {logger} = options;\n\n    const r = request(options, (error, response) => {\n      if (error) {\n        logger.warn(error);\n      }\n\n      if (response) {\n        response.options = options;\n\n        // I'm not sure why this line is necessary. request seems to be creating\n        // buffers that aren't Buffers.\n        if (options.responseType === 'buffer' && response.body.type === 'Buffer' && !isBuffer(response.body)) {\n          response.body = Buffer.from(response.body);\n        }\n\n        if (isBuffer(response.body) && !response.body.type) {\n          resolve(detect(response.body)\n            .then((type) => {\n              response.body.type = type;\n\n              return response;\n            }));\n\n          return;\n        }\n\n        resolve(response);\n      }\n      else {\n        // Make a network error behave like a browser network error.\n        resolve({\n          statusCode: 0,\n          options,\n          headers: options.headers,\n          method: options.method,\n          url: options.url,\n          body: error\n        });\n      }\n    });\n\n    r.on('response', (response) => {\n      const total = parseInt(response.headers['content-length'], 10);\n      let loaded = 0;\n\n      response.on('data', (data) => {\n        loaded += data.length;\n        options.download.emit('progress', new ProgressEvent(loaded, total));\n      });\n    });\n  });\n}\n\n/**\n * @name request\n * @param {Object} options\n * @returns {Promise}\n */\nexport default function _request(options) {\n  return prepareOptions(options)\n    .then(doRequest);\n}\n"]}