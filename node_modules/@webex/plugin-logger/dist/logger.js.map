{"version":3,"sources":["logger.js"],"names":["precedence","silent","group","groupEnd","error","warn","log","info","debug","trace","levels","filter","level","fallbacks","LOG_TYPES","SDK","CLIENT","SDK_LOG_TYPE_NAME","authTokenKeyPattern","walkAndFilter","object","visited","includes","push","map","o","patterns","containsEmails","test","replace","key","value","Logger","WebexPlugin","extend","namespace","derived","cache","fn","getCurrentLevel","client_level","getCurrentClientLevel","session","buffer","type","default","groupLevel","sdkBuffer","clientBuffer","args","arg","Error","process","env","NODE_ENV","inBrowser","ret","toString","stack","shouldPrint","shouldBuffer","config","WEBEX_LOG_LEVEL","webex","internal","device","features","developer","get","clientLevel","formatLogs","getDate","clientIndex","sdkIndex","separateLogBuffers","length","Date","join","makeLoggerMethod","impl","neverPrint","alwaysBuffer","wrappedConsoleMethod","logType","clientName","historyLength","clientHistoryLength","filtered","stringified","item","WebexHttpError","toPrint","unshift","url","slice","logDate","toISOString","repeat","shift","reason","console","forEach","impls","pop","prototype","client_logToBuffer","logToBuffer"],"mappings":"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","file":"logger.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {inBrowser, patterns} from '@webex/common';\nimport {\n  WebexHttpError,\n  WebexPlugin\n} from '@webex/webex-core';\nimport {\n  cloneDeep,\n  has,\n  isArray,\n  isObject,\n  isString\n} from 'lodash';\n\nconst precedence = {\n  silent: 0,\n  group: 1,\n  groupEnd: 2,\n  error: 3,\n  warn: 4,\n  log: 5,\n  info: 6,\n  debug: 7,\n  trace: 8\n};\n\nexport const levels = Object.keys(precedence).filter((level) => level !== 'silent');\n\nconst fallbacks = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\nconst LOG_TYPES = {\n  SDK: 'sdk',\n  CLIENT: 'client'\n};\n\nconst SDK_LOG_TYPE_NAME = 'wx-js-sdk';\n\nconst authTokenKeyPattern = /[Aa]uthorization/;\n\n/**\n * Recursively strips \"authorization\" fields from the specified object\n * @param {Object} object\n * @param {Array<mixed>} [visited]\n * @private\n * @returns {Object}\n */\nfunction walkAndFilter(object, visited = []) {\n  if (visited.includes(object)) {\n    // Prevent circular references\n    return object;\n  }\n\n  visited.push(object);\n\n  if (isArray(object)) {\n    return object.map((o) => walkAndFilter(o, visited));\n  }\n  if (!isObject(object)) {\n    if (isString(object)) {\n      if (patterns.containsEmails.test(object)) {\n        return object.replace(patterns.containsEmails, '[REDACTED]');\n      }\n    }\n\n    return object;\n  }\n\n  for (const [key, value] of Object.entries(object)) {\n    if (authTokenKeyPattern.test(key)) {\n      Reflect.deleteProperty(object, key);\n    }\n    else {\n      object[key] = walkAndFilter(value, visited);\n    }\n  }\n\n  return object;\n}\n\n/**\n * @class\n */\nconst Logger = WebexPlugin.extend({\n  namespace: 'Logger',\n\n  derived: {\n    level: {\n      cache: false,\n      fn() {\n        return this.getCurrentLevel();\n      }\n    },\n    client_level: {\n      cache: false,\n      fn() {\n        return this.getCurrentClientLevel();\n      }\n    }\n  },\n  session: {\n    // for when configured to use single buffer\n    buffer: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    },\n    groupLevel: {\n      type: 'number',\n      default() {\n        return 0;\n      }\n    },\n    // for when configured to use separate buffers\n    sdkBuffer: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    },\n    clientBuffer: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    }\n  },\n\n  /**\n   * Ensures auth headers don't get printed in logs\n   * @param {Array<mixed>} args\n   * @private\n   * @memberof Logger\n   * @returns {Array<mixed>}\n   */\n  filter(...args) {\n    return args.map((arg) => {\n      // WebexHttpError already ensures auth tokens don't get printed, so, no\n      // need to alter it here.\n      if (arg instanceof Error) {\n        // karma logs won't print subclassed errors correctly, so we need\n        // explicitly call their tostring methods.\n        if (process.env.NODE_ENV === 'test' && inBrowser) {\n          let ret = arg.toString();\n\n          ret += 'BEGIN STACK';\n          ret += arg.stack;\n          ret += 'END STACK';\n\n          return ret;\n        }\n\n        return arg;\n      }\n\n      arg = cloneDeep(arg);\n\n      return walkAndFilter(arg);\n    });\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * printed\n   * @param {string} level\n   * @param {string} type type of log, SDK or client\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldPrint(level, type = LOG_TYPES.SDK) {\n    return precedence[level] <= precedence[type === LOG_TYPES.SDK ? this.getCurrentLevel() : this.getCurrentClientLevel()];\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * put into the log buffer. We're configuring it omit trace and debug logs\n   * because there are *a lot* of debug logs that really don't provide value at\n   * runtime (they're helpful for debugging locally, but really just pollute the\n   * uploaded logs and push useful info out).\n   * @param {string} level\n   * @param {string} type type of log, SDK or client\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldBuffer(level) {\n    return precedence[level] <= precedence.info;\n  },\n\n  /**\n   * Indicates the current SDK log level based on env vars, feature toggles, and\n   * user type.\n   * @instance\n   * @memberof Logger\n   * @private\n   * @memberof Logger\n   * @returns {string}\n   */\n  // eslint-disable-next-line complexity\n  getCurrentLevel() {\n    // If a level has been explicitly set via config, alway use it.\n    if (this.config.level) {\n      return this.config.level;\n    }\n\n    if (levels.includes(process.env.WEBEX_LOG_LEVEL)) {\n      return process.env.WEBEX_LOG_LEVEL;\n    }\n\n    // Always use debug-level logging in test mode;\n    if (process.env.NODE_ENV === 'test') {\n      return 'trace';\n    }\n\n    // Use server-side-feature toggles to configure log levels\n    const level = this.webex.internal.device && this.webex.internal.device.features.developer.get('log-level');\n\n    if (level) {\n      if (levels.includes(level)) {\n        return level;\n      }\n    }\n\n    return 'error';\n  },\n\n  /**\n   * Indicates the current client log level based on config, defaults to SDK level\n   * @instance\n   * @memberof Logger\n   * @private\n   * @memberof Logger\n   * @returns {string}\n   */\n  getCurrentClientLevel() {\n    // If a client log level has been explicitly set via config, alway use it.\n    if (this.config.clientLevel) {\n      return this.config.clientLevel;\n    }\n\n    // otherwise default to SDK level\n    return this.getCurrentLevel();\n  },\n\n  /**\n   * Format logs (for upload)\n   *\n   * If separate client, SDK buffers is configured, merge the buffers, if configured\n   *\n   * @instance\n   * @memberof Logger\n   * @public\n   * @memberof Logger\n   * @returns {string} formatted buffer\n   */\n  formatLogs() {\n    function getDate(log) {\n      return log[1];\n    }\n    let buffer = [];\n    let clientIndex = 0;\n    let sdkIndex = 0;\n\n    if (this.config.separateLogBuffers) {\n      // merge the client and sdk buffers\n      // while we have entries in either buffer\n      while (clientIndex < this.clientBuffer.length || sdkIndex < this.sdkBuffer.length) {\n      // if we have remaining entries in the SDK buffer\n        if (sdkIndex < this.sdkBuffer.length &&\n          // and we haven't exhausted all the client buffer entries, or SDK date is before client date\n          (clientIndex >= this.clientBuffer.length ||\n            (new Date(getDate(this.sdkBuffer[sdkIndex])) <= new Date(getDate(this.clientBuffer[clientIndex]))))) {\n          // then add to the SDK buffer\n          buffer.push(this.sdkBuffer[sdkIndex]);\n          sdkIndex += 1;\n        }\n        // otherwise if we haven't exhausted all the client buffer entries, add client entry, whether it was because\n        // it was the only remaining entries or date was later (the above if)\n        else if (clientIndex < this.clientBuffer.length) {\n          buffer.push(this.clientBuffer[clientIndex]);\n          clientIndex += 1;\n        }\n      }\n    }\n    else {\n      buffer = this.buffer;\n    }\n\n    return buffer.join('\\n');\n  }\n});\n\n/**\n * Creates a logger method\n *\n *\n * @param {string} level level to create (info, error, warn, etc.)\n * @param {string} impl the level to use when writing to console\n * @param {string} type type of log, SDK or client\n * @param {bool} neverPrint function never prints to console\n * @param {bool} alwaysBuffer function always logs to log buffer\n * @instance\n * @memberof Logger\n * @private\n * @memberof Logger\n * @returns {function} logger method with specified params\n */\nfunction makeLoggerMethod(level, impl, type, neverPrint = false, alwaysBuffer = false) {\n  // Much of the complexity in the following function is due to a test-mode-only\n  // helper\n  return function wrappedConsoleMethod(...args) {\n    // it would be easier to just pass in the name and buffer here, but the config isn't completely initialized\n    // in Ampersand, even if the initialize method is used to set this up.  so we keep the type to achieve\n    // a sort of late binding to allow retrieving a name from config.\n    const logType = type;\n    const clientName = logType === LOG_TYPES.SDK ? SDK_LOG_TYPE_NAME : (this.config.clientName || logType);\n\n    let buffer;\n    let historyLength;\n\n    if (this.config.separateLogBuffers) {\n      historyLength = this.config.clientHistoryLength ? this.config.clientHistoryLength : this.config.historyLength;\n      buffer = logType === LOG_TYPES.SDK ? this.sdkBuffer : this.clientBuffer;\n    }\n    else {\n      buffer = this.buffer;\n      historyLength = this.config.historyLength;\n    }\n\n    try {\n      const shouldPrint = !neverPrint && this.shouldPrint(level, logType);\n      const shouldBuffer = alwaysBuffer || this.shouldBuffer(level);\n\n      if (!shouldBuffer && !shouldPrint) {\n        return;\n      }\n\n      const filtered = [clientName, ...this.filter(...args)];\n      const stringified = filtered.map((item) => {\n        if (item instanceof WebexHttpError) {\n          return item.toString();\n        }\n\n        return item;\n      });\n\n      if (shouldPrint) {\n        // when logging an object in browsers, we tend to get a dynamic\n        // reference, thus going back to look at the logged value doesn't\n        // necessarily show the state at log time, thus we print the stringified\n        // value.\n        const toPrint = inBrowser ? stringified : filtered;\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'test' && has(this, 'webex.internal.device.url')) {\n          toPrint.unshift(this.webex.internal.device.url.slice(-3));\n        }\n        // eslint-disable-next-line no-console\n        console[impl](...toPrint);\n      }\n\n      if (shouldBuffer) {\n        const logDate = new Date();\n\n        stringified.unshift(logDate.toISOString());\n        stringified.unshift('|  '.repeat(this.groupLevel));\n        buffer.push(stringified);\n        if (buffer.length > historyLength) {\n          buffer.shift();\n        }\n        if (level === 'group') this.groupLevel += 1;\n        if (level === 'groupEnd' && this.groupLevel > 0) this.groupLevel -= 1;\n      }\n    }\n    catch (reason) {\n      if (!neverPrint) {\n        /* istanbul ignore next */\n        // eslint-disable-next-line no-console\n        console.warn(`failed to execute Logger#${level}`, reason);\n      }\n    }\n  };\n}\n\nlevels.forEach((level) => {\n  let impls = fallbacks[level];\n  let impl = level;\n\n  if (impls) {\n    impls = impls.slice();\n    // eslint-disable-next-line no-console\n    while (!console[impl]) {\n      impl = impls.pop();\n    }\n  }\n\n\n  // eslint-disable-next-line complexity\n  Logger.prototype[`client_${level}`] = makeLoggerMethod(level, impl, LOG_TYPES.CLIENT);\n  Logger.prototype[level] = makeLoggerMethod(level, impl, LOG_TYPES.SDK);\n});\n\nLogger.prototype.client_logToBuffer =\n  makeLoggerMethod(levels.info, levels.info, LOG_TYPES.CLIENT, true, true);\nLogger.prototype.logToBuffer = makeLoggerMethod(levels.info, levels.info, LOG_TYPES.SDK, true, true);\n\nexport default Logger;\n"]}