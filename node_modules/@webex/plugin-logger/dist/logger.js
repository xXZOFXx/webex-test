'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.levels = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');

var _deleteProperty2 = _interopRequireDefault(_deleteProperty);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _cloneDeep2 = require('lodash/cloneDeep');

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _common = require('@webex/common');

var _webexCore = require('@webex/webex-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

var precedence = {
  silent: 0,
  group: 1,
  groupEnd: 2,
  error: 3,
  warn: 4,
  log: 5,
  info: 6,
  debug: 7,
  trace: 8
};

var levels = exports.levels = (0, _keys2.default)(precedence).filter(function (level) {
  return level !== 'silent';
});

var fallbacks = {
  error: ['log'],
  warn: ['error', 'log'],
  info: ['log'],
  debug: ['info', 'log'],
  trace: ['debug', 'info', 'log']
};

var LOG_TYPES = {
  SDK: 'sdk',
  CLIENT: 'client'
};

var SDK_LOG_TYPE_NAME = 'wx-js-sdk';

var authTokenKeyPattern = /[Aa]uthorization/;

/**
 * Recursively strips "authorization" fields from the specified object
 * @param {Object} object
 * @param {Array<mixed>} [visited]
 * @private
 * @returns {Object}
 */
function walkAndFilter(object) {
  var visited = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (visited.includes(object)) {
    // Prevent circular references
    return object;
  }

  visited.push(object);

  if ((0, _isArray3.default)(object)) {
    return object.map(function (o) {
      return walkAndFilter(o, visited);
    });
  }
  if (!(0, _isObject3.default)(object)) {
    if ((0, _isString3.default)(object)) {
      if (_common.patterns.containsEmails.test(object)) {
        return object.replace(_common.patterns.containsEmails, '[REDACTED]');
      }
    }

    return object;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(object)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

      var key = _ref2[0];
      var value = _ref2[1];

      if (authTokenKeyPattern.test(key)) {
        (0, _deleteProperty2.default)(object, key);
      } else {
        object[key] = walkAndFilter(value, visited);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return object;
}

/**
 * @class
 */
var Logger = _webexCore.WebexPlugin.extend({
  namespace: 'Logger',

  derived: {
    level: {
      cache: false,
      fn: function fn() {
        return this.getCurrentLevel();
      }
    },
    client_level: {
      cache: false,
      fn: function fn() {
        return this.getCurrentClientLevel();
      }
    }
  },
  session: {
    // for when configured to use single buffer
    buffer: {
      type: 'array',
      default: function _default() {
        return [];
      }
    },
    groupLevel: {
      type: 'number',
      default: function _default() {
        return 0;
      }
    },
    // for when configured to use separate buffers
    sdkBuffer: {
      type: 'array',
      default: function _default() {
        return [];
      }
    },
    clientBuffer: {
      type: 'array',
      default: function _default() {
        return [];
      }
    }
  },

  /**
   * Ensures auth headers don't get printed in logs
   * @param {Array<mixed>} args
   * @private
   * @memberof Logger
   * @returns {Array<mixed>}
   */
  filter: function filter() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.map(function (arg) {
      // WebexHttpError already ensures auth tokens don't get printed, so, no
      // need to alter it here.
      if (arg instanceof Error) {
        // karma logs won't print subclassed errors correctly, so we need
        // explicitly call their tostring methods.
        if (process.env.NODE_ENV === 'test' && _common.inBrowser) {
          var ret = arg.toString();

          ret += 'BEGIN STACK';
          ret += arg.stack;
          ret += 'END STACK';

          return ret;
        }

        return arg;
      }

      arg = (0, _cloneDeep3.default)(arg);

      return walkAndFilter(arg);
    });
  },


  /**
   * Determines if the current level allows logs at the specified level to be
   * printed
   * @param {string} level
   * @param {string} type type of log, SDK or client
   * @private
   * @memberof Logger
   * @returns {boolean}
   */
  shouldPrint: function shouldPrint(level) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOG_TYPES.SDK;

    return precedence[level] <= precedence[type === LOG_TYPES.SDK ? this.getCurrentLevel() : this.getCurrentClientLevel()];
  },


  /**
   * Determines if the current level allows logs at the specified level to be
   * put into the log buffer. We're configuring it omit trace and debug logs
   * because there are *a lot* of debug logs that really don't provide value at
   * runtime (they're helpful for debugging locally, but really just pollute the
   * uploaded logs and push useful info out).
   * @param {string} level
   * @param {string} type type of log, SDK or client
   * @private
   * @memberof Logger
   * @returns {boolean}
   */
  shouldBuffer: function shouldBuffer(level) {
    return precedence[level] <= precedence.info;
  },


  /**
   * Indicates the current SDK log level based on env vars, feature toggles, and
   * user type.
   * @instance
   * @memberof Logger
   * @private
   * @memberof Logger
   * @returns {string}
   */
  // eslint-disable-next-line complexity
  getCurrentLevel: function getCurrentLevel() {
    // If a level has been explicitly set via config, alway use it.
    if (this.config.level) {
      return this.config.level;
    }

    if (levels.includes(process.env.WEBEX_LOG_LEVEL)) {
      return process.env.WEBEX_LOG_LEVEL;
    }

    // Always use debug-level logging in test mode;
    if (process.env.NODE_ENV === 'test') {
      return 'trace';
    }

    // Use server-side-feature toggles to configure log levels
    var level = this.webex.internal.device && this.webex.internal.device.features.developer.get('log-level');

    if (level) {
      if (levels.includes(level)) {
        return level;
      }
    }

    return 'error';
  },


  /**
   * Indicates the current client log level based on config, defaults to SDK level
   * @instance
   * @memberof Logger
   * @private
   * @memberof Logger
   * @returns {string}
   */
  getCurrentClientLevel: function getCurrentClientLevel() {
    // If a client log level has been explicitly set via config, alway use it.
    if (this.config.clientLevel) {
      return this.config.clientLevel;
    }

    // otherwise default to SDK level
    return this.getCurrentLevel();
  },


  /**
   * Format logs (for upload)
   *
   * If separate client, SDK buffers is configured, merge the buffers, if configured
   *
   * @instance
   * @memberof Logger
   * @public
   * @memberof Logger
   * @returns {string} formatted buffer
   */
  formatLogs: function formatLogs() {
    function getDate(log) {
      return log[1];
    }
    var buffer = [];
    var clientIndex = 0;
    var sdkIndex = 0;

    if (this.config.separateLogBuffers) {
      // merge the client and sdk buffers
      // while we have entries in either buffer
      while (clientIndex < this.clientBuffer.length || sdkIndex < this.sdkBuffer.length) {
        // if we have remaining entries in the SDK buffer
        if (sdkIndex < this.sdkBuffer.length && (
        // and we haven't exhausted all the client buffer entries, or SDK date is before client date
        clientIndex >= this.clientBuffer.length || new Date(getDate(this.sdkBuffer[sdkIndex])) <= new Date(getDate(this.clientBuffer[clientIndex])))) {
          // then add to the SDK buffer
          buffer.push(this.sdkBuffer[sdkIndex]);
          sdkIndex += 1;
        }
        // otherwise if we haven't exhausted all the client buffer entries, add client entry, whether it was because
        // it was the only remaining entries or date was later (the above if)
        else if (clientIndex < this.clientBuffer.length) {
            buffer.push(this.clientBuffer[clientIndex]);
            clientIndex += 1;
          }
      }
    } else {
      buffer = this.buffer;
    }

    return buffer.join('\n');
  },
  version: '1.80.264'
});

/**
 * Creates a logger method
 *
 *
 * @param {string} level level to create (info, error, warn, etc.)
 * @param {string} impl the level to use when writing to console
 * @param {string} type type of log, SDK or client
 * @param {bool} neverPrint function never prints to console
 * @param {bool} alwaysBuffer function always logs to log buffer
 * @instance
 * @memberof Logger
 * @private
 * @memberof Logger
 * @returns {function} logger method with specified params
 */
function makeLoggerMethod(level, impl, type) {
  var neverPrint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var alwaysBuffer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // Much of the complexity in the following function is due to a test-mode-only
  // helper
  return function wrappedConsoleMethod() {
    // it would be easier to just pass in the name and buffer here, but the config isn't completely initialized
    // in Ampersand, even if the initialize method is used to set this up.  so we keep the type to achieve
    // a sort of late binding to allow retrieving a name from config.
    var logType = type;
    var clientName = logType === LOG_TYPES.SDK ? SDK_LOG_TYPE_NAME : this.config.clientName || logType;

    var buffer = void 0;
    var historyLength = void 0;

    if (this.config.separateLogBuffers) {
      historyLength = this.config.clientHistoryLength ? this.config.clientHistoryLength : this.config.historyLength;
      buffer = logType === LOG_TYPES.SDK ? this.sdkBuffer : this.clientBuffer;
    } else {
      buffer = this.buffer;
      historyLength = this.config.historyLength;
    }

    try {
      var shouldPrint = !neverPrint && this.shouldPrint(level, logType);
      var shouldBuffer = alwaysBuffer || this.shouldBuffer(level);

      if (!shouldBuffer && !shouldPrint) {
        return;
      }

      var filtered = [clientName].concat((0, _toConsumableArray3.default)(this.filter.apply(this, arguments)));
      var stringified = filtered.map(function (item) {
        if (item instanceof _webexCore.WebexHttpError) {
          return item.toString();
        }

        return item;
      });

      if (shouldPrint) {
        var _console;

        // when logging an object in browsers, we tend to get a dynamic
        // reference, thus going back to look at the logged value doesn't
        // necessarily show the state at log time, thus we print the stringified
        // value.
        var toPrint = _common.inBrowser ? stringified : filtered;

        /* istanbul ignore if */
        if (process.env.NODE_ENV === 'test' && (0, _has3.default)(this, 'webex.internal.device.url')) {
          toPrint.unshift(this.webex.internal.device.url.slice(-3));
        }
        // eslint-disable-next-line no-console
        (_console = console)[impl].apply(_console, (0, _toConsumableArray3.default)(toPrint));
      }

      if (shouldBuffer) {
        var logDate = new Date();

        stringified.unshift(logDate.toISOString());
        stringified.unshift('|  '.repeat(this.groupLevel));
        buffer.push(stringified);
        if (buffer.length > historyLength) {
          buffer.shift();
        }
        if (level === 'group') this.groupLevel += 1;
        if (level === 'groupEnd' && this.groupLevel > 0) this.groupLevel -= 1;
      }
    } catch (reason) {
      if (!neverPrint) {
        /* istanbul ignore next */
        // eslint-disable-next-line no-console
        console.warn('failed to execute Logger#' + level, reason);
      }
    }
  };
}

levels.forEach(function (level) {
  var impls = fallbacks[level];
  var impl = level;

  if (impls) {
    impls = impls.slice();
    // eslint-disable-next-line no-console
    while (!console[impl]) {
      impl = impls.pop();
    }
  }

  // eslint-disable-next-line complexity
  Logger.prototype['client_' + level] = makeLoggerMethod(level, impl, LOG_TYPES.CLIENT);
  Logger.prototype[level] = makeLoggerMethod(level, impl, LOG_TYPES.SDK);
});

Logger.prototype.client_logToBuffer = makeLoggerMethod(levels.info, levels.info, LOG_TYPES.CLIENT, true, true);
Logger.prototype.logToBuffer = makeLoggerMethod(levels.info, levels.info, LOG_TYPES.SDK, true, true);

exports.default = Logger;
//# sourceMappingURL=logger.js.map
