{"version":3,"sources":["support.js"],"names":["Support","WebexPlugin","extend","namespace","getFeedbackUrl","options","request","method","api","resource","body","appVersion","config","appType","feedbackId","uuid","v4","languageCode","then","res","url","getSupportUrl","webex","qs","submitLogs","metadata","logs","metadataArray","_constructFileMetadata","logger","sdkBuffer","clientBuffer","buffer","formatLogs","filename","locusId","callStart","sessionId","userId","credentials","getUserToken","catch","getClientToken","token","headers","authorization","toString","initalOpts","service","finalOpts","file","shouldAttemptReauth","phases","initialize","upload","$uri","session","tempURL","finalize","$body","logFilename","data","internal","device","map","key","value","filter","entry","Boolean","push"],"mappings":"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","file":"support.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {defaults} from 'lodash';\nimport uuid from 'uuid';\n\nconst Support = WebexPlugin.extend({\n  namespace: 'Support',\n\n  getFeedbackUrl(options) {\n    options = options || {};\n\n    return this.request({\n      method: 'POST',\n      api: 'conversation',\n      resource: 'users/deskFeedbackUrl',\n      body: defaults(options, {\n        appVersion: this.config.appVersion,\n        appType: this.config.appType,\n        feedbackId: options.feedbackId || uuid.v4(),\n        languageCode: this.config.languageCode\n      })\n    })\n      .then((res) => res.body.url);\n  },\n\n  getSupportUrl() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'conversation',\n      resource: 'users/deskSupportUrl',\n      qs: {\n        languageCode: this.config.languageCode\n      }\n    })\n      .then((res) => res.body.url);\n  },\n\n  submitLogs(metadata, logs) {\n    const metadataArray = this._constructFileMetadata(metadata);\n\n    // this is really testing that Ampersand is fully ready.  once it's ready, these exist\n    if (!logs && this.webex.logger.sdkBuffer && this.webex.logger.clientBuffer && this.webex.logger.buffer) {\n      logs = this.webex.logger.formatLogs();\n    }\n\n    let filename;\n\n    if (metadata.locusId && metadata.callStart) {\n      filename = `${metadata.locusId}_${metadata.callStart}.txt`;\n    }\n    else {\n      filename = `${this.webex.sessionId}.txt`;\n    }\n\n    let userId;\n\n    return this.webex.credentials.getUserToken()\n      .catch(() => this.webex.credentials.getClientToken())\n      .then(async (token) => {\n        const headers = {authorization: token.toString()};\n\n        const initalOpts = {\n          service: 'clientLogs',\n          resource: 'logs/urls'\n        };\n\n        const finalOpts = {\n          service: 'clientLogs',\n          resource: 'logs/meta'\n        };\n\n        const options = defaults(initalOpts, {\n          file: logs,\n          shouldAttemptReauth: false,\n          headers,\n          phases: {\n            initialize: {\n              body: {\n                file: filename\n              }\n            },\n            upload: {\n              $uri: (session) => session.tempURL\n            },\n            finalize: defaults(finalOpts, {\n              $body: (session) => {\n                userId = session.userId;\n\n                return {\n                  filename: session.logFilename,\n                  data: metadataArray,\n                  userId: this.webex.internal.device.userId || session.userId\n                };\n              }\n            })\n          }\n        });\n\n        return this.webex.upload(options);\n      })\n      .then((body) => {\n        if (userId && !body.userId) {\n          body.userId = userId;\n        }\n\n        return body;\n      });\n  },\n\n  _constructFileMetadata(metadata) {\n    const metadataArray = [\n      'locusId',\n      'callStart',\n      'feedbackId',\n      'correlationId'\n    ].map((key) => {\n      if (metadata[key]) {\n        return {\n          key,\n          value: metadata[key]\n        };\n      }\n\n      return null;\n    })\n      .filter((entry) => Boolean(entry));\n\n    metadataArray.push({\n      key: 'trackingId',\n      value: this.webex.sessionId\n    });\n\n    return metadataArray;\n  }\n});\n\nexport default Support;\n"]}