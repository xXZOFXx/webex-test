{"version":3,"sources":["response-logger.js"],"names":["ResponseLoggerInterceptor","options","response","now","Date","printResponseHeader","logger","console","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","info","getTime","toISOString","body","util","inspect","depth","err","reason","error","reject","statusCode","$timings","networkEnd","networkStart","requestEnd","requestStart","webex","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAGA;;AACA;;;;AAEA;;;IAGqBA,yB;;;;;;;;;;;;AAQnB;;;;;;+BAMWC,O,EAASC,Q,EAAU;AAC5B,UAAMC,MAAM,IAAIC,IAAJ,EAAZ;;AAEA,WAAKC,mBAAL,CAAyBJ,OAAzB,EAAkCC,QAAlC;;AAEA,UAAMI,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAIC,QAAQC,GAAR,CAAYC,8BAAhB,EAAgD;AAC9CJ,eAAOK,IAAP,CAAY,mBAAZ,EAAiCR,IAAIS,OAAJ,EAAjC,EAAgDT,IAAIU,WAAJ,EAAhD;AACA,YAAI,OAAOX,SAASY,IAAhB,KAAyB,QAAzB,IAAqC,sBAASZ,SAASY,IAAlB,CAAzC,EAAkE;AAChER,iBAAOK,IAAP,CAAY,YAAZ,EAA0B,mCAA1B;AACD,SAFD,MAGK,IAAI,sBAAOT,SAASY,IAAhB,MAAyB,QAA7B,EAAuC;AAC1C,cAAI;AACFR,mBAAOK,IAAP,CAAY,YAAZ,EAA0BI,eAAKC,OAAL,CAAa,oBAAKd,SAASY,IAAd,EAAoB,UAApB,CAAb,EAA8C,EAACG,OAAO,IAAR,EAA9C,CAA1B;AACD,WAFD,CAGA,OAAOC,GAAP,EAAY;AACVZ,mBAAOK,IAAP,CAAY,YAAZ,EAA0B,oBAA1B,EAAgDO,GAAhD;AACD;AACF;AACF;AACDZ,aAAOK,IAAP,CAAY,2EAAZ;;AAEA,aAAOT,QAAP;AACD;;AAED;;;;;;;;;oCAMgBD,O,EAASkB,M,EAAQ;AAC/B,UAAMhB,MAAM,IAAIC,IAAJ,EAAZ;;AAEA,WAAKC,mBAAL,CAAyBJ,OAAzB,EAAkCkB,MAAlC;;AAEA,UAAMb,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAIC,QAAQC,GAAR,CAAYC,8BAAhB,EAAgD;AAC9CJ,eAAOK,IAAP,CAAY,mBAAZ,EAAiCR,IAAIS,OAAJ,EAAjC,EAAgDT,IAAIU,WAAJ,EAAhD;AACA,YAAI;AACFP,iBAAOc,KAAP,CAAa,YAAb,EAA2BL,eAAKC,OAAL,CAAaG,OAAOL,IAApB,EAA0B,EAACG,OAAO,IAAR,EAA1B,CAA3B;AACD,SAFD,CAGA,OAAOC,GAAP,EAAY;AACVZ,iBAAOc,KAAP,CAAa,YAAb,EAA2BD,OAAOL,IAAlC;AACD;AACF;AACDR,aAAOK,IAAP,CAAY,2EAAZ;;AAEA,aAAO,kBAAQU,MAAR,CAAeF,MAAf,CAAP;AACD;;AAED;;;;;;;;;wCAMoBlB,O,EAASC,Q,EAAU;AACrC,UAAMI,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEAD,aAAOK,IAAP,CAAY,cAAZ,EAA4BT,SAASoB,UAArC;AACAhB,aAAOK,IAAP,CAAY,mBAAZ,EAAiC,mBAAIV,OAAJ,EAAa,oBAAb,KAAsC,mBAAIC,QAAJ,EAAc,oBAAd,CAAvE;AACAI,aAAOK,IAAP,CAAY,mBAAZ,EAAiCV,QAAQsB,QAAR,CAAiBC,UAAjB,GAA8BvB,QAAQsB,QAAR,CAAiBE,YAAhF;AACAnB,aAAOK,IAAP,CAAY,sBAAZ,EAAoCV,QAAQsB,QAAR,CAAiBG,UAAjB,GAA8BzB,QAAQsB,QAAR,CAAiBI,YAAnF;AACD;;;;AA/ED;;;6BAGgB;AACd,aAAO,IAAI3B,yBAAJ,CAA8B,EAAC4B,OAAO,IAAR,EAA9B,CAAP;AACD;;;EANoDC,qB,GAbvD;;;;kBAaqB7B,yB","file":"response-logger.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\nimport {get, omit} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\nimport {isBuffer} from '@webex/common';\n\n/**\n * @class\n */\nexport default class ResponseLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {ResponseLoggerInterceptor}\n   */\n  static create() {\n    return new ResponseLoggerInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const now = new Date();\n\n    this.printResponseHeader(options, response);\n\n    const logger = get(this, 'webex.logger', console);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.info('timestamp (end): ', now.getTime(), now.toISOString());\n      if (typeof response.body === 'string' || isBuffer(response.body)) {\n        logger.info('Response: ', 'Not printed, it`s probably a file');\n      }\n      else if (typeof response.body === 'object') {\n        try {\n          logger.info('Response: ', util.inspect(omit(response.body, 'features'), {depth: null}));\n        }\n        catch (err) {\n          logger.info('Response: ', '[Not Serializable]', err);\n        }\n      }\n    }\n    logger.info('\\\\**********************************************************************/');\n\n    return response;\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Object} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const now = new Date();\n\n    this.printResponseHeader(options, reason);\n\n    const logger = get(this, 'webex.logger', console);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.info('timestamp (end): ', now.getTime(), now.toISOString());\n      try {\n        logger.error('Response: ', util.inspect(reason.body, {depth: null}));\n      }\n      catch (err) {\n        logger.error('Response: ', reason.body);\n      }\n    }\n    logger.info('\\\\**********************************************************************/');\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Prints the basic header\n   * @param {Object} options\n   * @param {HttpResponse|WebexHttpError} response\n   * @returns {undefined}\n   */\n  printResponseHeader(options, response) {\n    const logger = get(this, 'webex.logger', console);\n\n    logger.info('Status Code:', response.statusCode);\n    logger.info('WEBEX_TRACKINGID:', get(options, 'headers.trackingid') || get(response, 'headers.trackingid'));\n    logger.info('Network duration:', options.$timings.networkEnd - options.$timings.networkStart);\n    logger.info('Processing duration:', options.$timings.requestEnd - options.$timings.requestStart);\n  }\n}\n"]}