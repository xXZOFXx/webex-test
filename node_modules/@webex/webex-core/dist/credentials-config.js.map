{"version":3,"sources":["credentials-config.js"],"names":["CredentialsConfig","AmpState","extend","extraProperties","props","idbroker","url","process","env","IDBROKER_BASE_URL","identity","IDENTITY_BASE_URL","authorizationString","WEBEX_AUTHORIZATION_STRING","AUTHORIZATION_STRING","authorizeUrl","WEBEX_AUTHORIZE_URL","client_id","WEBEX_CLIENT_ID","COMMON_IDENTITY_CLIENT_ID","CLIENT_ID","client_secret","WEBEX_CLIENT_SECRET","COMMON_IDENTITY_CLIENT_SECRET","CLIENT_SECRET","redirect_uri","WEBEX_REDIRECT_URI","COMMON_IDENTITY_REDIRECT_URI","REDIRECT_URI","scope","WEBEX_SCOPE","WEBEX_SCOPES","COMMON_IDENTITY_SCOPE","SCOPE","cisService","derived","activationUrl","deps","fn","cache","tokenUrl","TOKEN_URL","revokeUrl","REVOKE_URL","logoutUrl","setPasswordUrl"],"mappings":"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","file":"credentials-config.js","sourcesContent":["import AmpState from 'ampersand-state';\n\n// The credentials config which includes the CI server info and derived\n// URL properties from them for the various CI services.  The URL's\n// will be updated when the CI changes.\nconst CredentialsConfig = AmpState.extend({\n\n  // we need to allow extra props for dynamic props like jwtRefreshCallback\n  extraProperties: 'allow',\n\n  props: {\n    /**\n     * The idbroker base host name\n     * @returns {object}\n     */\n    idbroker: ['object', false, (() => ({\n      url: process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'\n    }))],\n\n    /**\n     * The identity base host name\n     * @returns {object}\n     */\n    identity: ['object', false, (() => ({\n      url: process.env.IDENTITY_BASE_URL || 'https://identity.webex.com'\n    }))],\n\n    /**\n      * This is the authorization url displayed on the\n      * {@link developer portal|https://developer.webex.com}\n      * @type {string}\n      */\n    authorizationString: ['string', false, process.env.WEBEX_AUTHORIZATION_STRING || process.env.AUTHORIZATION_STRING],\n\n    /**\n     * Authorization URL which prompts for user's password. Inferred from\n     * {@link config.credentials.authorizationString}. This config value will\n     * be automatically set if `authorizationString` config value is specified.\n     *\n     * @type {string}\n     */\n    authorizeUrl: [\n      'string',\n      false,\n      process.env.WEBEX_AUTHORIZE_URL ||\n       `${process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'}/idb/oauth2/v1/authorize`\n    ],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    client_id: ['string', false, process.env.WEBEX_CLIENT_ID || process.env.COMMON_IDENTITY_CLIENT_ID || process.env.CLIENT_ID],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    client_secret: ['string', false, process.env.WEBEX_CLIENT_SECRET || process.env.COMMON_IDENTITY_CLIENT_SECRET || process.env.CLIENT_SECRET],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    redirect_uri: ['string', false, process.env.WEBEX_REDIRECT_URI || process.env.COMMON_IDENTITY_REDIRECT_URI || process.env.REDIRECT_URI],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    scope: ['string', false, process.env.WEBEX_SCOPE || process.env.WEBEX_SCOPES || process.env.COMMON_IDENTITY_SCOPE || process.env.SCOPE],\n\n    /**\n      * Controls the UI of the CI login page.\n      * @private\n      * @type {string}\n      */\n    cisService: ['string', false, 'webex']\n  },\n\n  derived: {\n    /**\n      * User activation URL\n      * {@link config.credentials.activationUrl}\n      * @type {string}\n      */\n    activationUrl: {\n      deps: ['idbroker.url'],\n      fn() {\n        return `${this.idbroker.url || 'https://idbroker.webex.com'}/idb/token/v1/actions/UserActivation/invoke`;\n      },\n      cache: false\n    },\n\n    // TODO does hydra also have an access_token endpoint?\n    /**\n      * Token URL used for token refresh and auth code exchange\n      * @type {string}\n      */\n    tokenUrl: {\n      deps: ['idbroker.url'],\n      fn() {\n        return process.env.TOKEN_URL || `${this.idbroker.url}/idb/oauth2/v1/access_token`;\n      },\n      cache: false\n    },\n\n    /**\n      * URL to revoke token\n      * @type {string}\n      */\n    revokeUrl: {\n      deps: ['idbroker.url'],\n      fn() {\n        return process.env.REVOKE_URL || `${this.idbroker.url}/idb/oauth2/v1/revoke`;\n      },\n      cache: false\n    },\n\n    /**\n      * URL to load when the app logs out\n      * @type {string}\n      */\n    logoutUrl: {\n      deps: ['idbroker.url'],\n      fn() {\n        return `${this.idbroker.url}/idb/oauth2/v1/logout`;\n      },\n      cache: false\n    },\n\n    /**\n      * Set password URL\n      * @type {string}\n      */\n    setPasswordUrl: {\n      deps: ['identity.url'],\n      fn() {\n        return `${this.identity.url || 'https://identity.webex.com'}/identity/scim/v1/Users`;\n      },\n      cache: false\n    }\n\n  }\n\n});\n\nexport default CredentialsConfig;\n"]}