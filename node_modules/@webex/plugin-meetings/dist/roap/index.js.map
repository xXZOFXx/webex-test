{"version":3,"sources":["index.js"],"names":["Roap","attrs","options","roapHandler","RoapHandler","sendRoapOK","bind","sendRoapAnswer","roapRequest","RoapRequest","lastRoapOffer","data","msg","message","correlationId","LoggerProxy","logger","log","submit","type","ROAP","RECEIVE_ROAP_MSG","seq","RECEIVE_CALL_LEAVE","resolve","then","meeting","webex","meetings","meetingCollection","get","roapMessage","messageType","ROAP_TYPES","OK","version","ROAP_VERSION","sendRoap","locusSelfUrl","selfUrl","mediaId","audioMuted","isAudioMuted","videoMuted","isVideoMuted","meetingId","id","SEND_ROAP_MSG","setRoapSeq","ANSWER","sdps","session","locus","errorType","ERROR","OFFER","reconnect","sdp","roapSeq","parseFloat","tieBreaker","SEND_ROAP_MSG_SUCCESS","StatelessWebexPlugin","sendRoapCallRequest","roapBody","localMedias","localSdp","attachRechabilityData","MeetingUtil","joinMeetingOptions"],"mappings":"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","file":"index.js","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {ROAP} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport MeetingUtil from '../meeting/util';\n\nimport RoapHandler from './handler';\nimport RoapRequest from './request';\n\n/**\n * Roap options\n * @typedef {Object} RoapOptions\n * @property {String} sdp\n * @property {Meeting} meeting\n * @property {Number} roapSeq\n * @property {Boolean} reconnect\n */\n\n/**\n  * @typedef {Object} SeqOptions\n  * @property {String} correlationId\n  * @property {String} mediaId\n  * @property {Number} seq\n  */\n\n/**\n * @class Roap\n * @export\n * @private\n */\nexport default class Roap extends StatelessWebexPlugin {\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.options = options;\n    /**\n     * The Roap Process State Handler\n     * @instance\n     * @type {RoapHandler}\n     * @private\n     * @memberof Roap\n     */\n    this.roapHandler = new RoapHandler(this.attrs, this.options, this.sendRoapOK.bind(this), this.sendRoapAnswer.bind(this));\n    /**\n     * The Roap Request Server Proxy Object\n     * @instance\n     * @type {RoapRequest}\n     * @private\n     * @memberof Roap\n     */\n    this.roapRequest = new RoapRequest({}, options);\n    /**\n     * The last roap offer sent to server and acked\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.lastRoapOffer = {};\n  }\n\n  /**\n   * Starts listening to mercury events for Roap messages\n   * @param {object} data event object\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  roapEvent(data) {\n    const msg = data.message;\n    const {correlationId} = data;\n\n    LoggerProxy.logger.log(`Roap:index#roapEvent --> Received Roap Message [${JSON.stringify(msg, null, 2)}]`);\n    this.roapHandler.submit({\n      type: ROAP.RECEIVE_ROAP_MSG,\n      msg,\n      correlationId\n    });\n  }\n\n  /**\n   *\n   * @param {String} correlationId correlation id of a meeting\n   * @param {Number} seq ROAP sequence number\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  stop(correlationId, seq) {\n    this.roapHandler.submit({\n      type: ROAP.RECEIVE_CALL_LEAVE,\n      seq,\n      correlationId\n    });\n\n    return Promise.resolve();\n  }\n\n  /**\n   *\n   * @param {SeqOptions} options\n   * @returns {null}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapOK(options) {\n    return Promise.resolve().then(() => {\n      const meeting = this.webex.meetings.meetingCollection.get(options.correlationId);\n      const roapMessage = {\n        messageType: ROAP.ROAP_TYPES.OK,\n        version: ROAP.ROAP_VERSION,\n        seq: options.seq\n      };\n\n      LoggerProxy.logger.log(`Roap:index#sendRoapOK --> ROAP OK sending with seq ${options.seq}`);\n\n      return this.roapRequest\n        .sendRoap({\n          roapMessage,\n          locusSelfUrl: meeting.selfUrl,\n          mediaId: options.mediaId,\n          correlationId: options.correlationId,\n          audioMuted: meeting.isAudioMuted(),\n          videoMuted: meeting.isVideoMuted(),\n          meetingId: meeting.id\n        })\n        .then(() => {\n          this.roapHandler.submit({\n            type: ROAP.SEND_ROAP_MSG,\n            msg: roapMessage,\n            correlationId: options.correlationId\n          });\n          LoggerProxy.logger.log(`Roap:index#sendRoapOK --> ROAP OK sent with seq ${options.seq}`);\n          meeting.setRoapSeq(options.seq);\n        });\n    });\n  }\n\n  // eslint-disable-next-line no-warning-comments\n  // TODO: try to merge sendRoapOk and roapAnswer\n  /**\n   * Sends a ROAP answer...\n   * @param {SeqOptions} options\n   * @param {Boolean} options.audioMuted\n   * @param {Boolean} options.videoMuted\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapAnswer(options) {\n    const meeting = this.webex.meetings.meetingCollection.get(options.correlationId);\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.ANSWER,\n      sdps: options.sdps,\n      version: ROAP.ROAP_VERSION,\n      seq: options.seq\n    };\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        locusSelfUrl: meeting.selfUrl,\n        mediaId: options.mediaId,\n        correlationId: options.correlationId,\n        audioMuted: options.audioMuted,\n        videoMuted: options.videoMuted,\n        meetingId: meeting.id\n      })\n      .then(() => {\n        meeting.setRoapSeq(options.seq);\n        this.roapHandler.submit({\n          type: ROAP.SEND_ROAP_MSG,\n          msg: roapMessage,\n          correlationId: options.correlationId\n        });\n      });\n  }\n\n  /**\n   * Sends a ROAP error...\n   * @param {Object} session\n   * @param {Object} locus\n   * @param {String} errorType\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapError(session, locus, errorType) {\n    const msg = {\n      messageType: ROAP.ROAP_TYPES.ERROR,\n      version: ROAP.ROAP_VERSION,\n      errorType,\n      seq: session.OFFER.seq\n    };\n\n    return this.roapRequest.sendRoap(msg, locus);\n  }\n\n  /**\n   * sends a roap media request\n   * @param {RoapOptions} options\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapMediaRequest(options) {\n    const {meeting, reconnect} = options;\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.OFFER,\n      sdps: [options.sdp],\n      // sdps: [options.sdp],\n      version: ROAP.ROAP_VERSION,\n      seq: typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,\n      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario\n    };\n\n    this.roapHandler.submit({\n      type: ROAP.SEND_ROAP_MSG,\n      msg: roapMessage,\n      correlationId: meeting.correlationId\n    });\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        correlationId: meeting.correlationId,\n        locusSelfUrl: meeting.selfUrl,\n        mediaId: reconnect ? '' : meeting.mediaId,\n        audioMuted: meeting.isAudioMuted(),\n        videoMuted: meeting.isVideoMuted(),\n        meetingId: meeting.id\n      })\n      .then((locus) => {\n        this.roapHandler.submit({\n          type: ROAP.SEND_ROAP_MSG_SUCCESS,\n          seq: roapMessage.seq,\n          correlationId: meeting.correlationId\n        });\n        meeting.setRoapSeq(roapMessage.seq);\n\n        // eslint-disable-next-line no-warning-comments\n        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here\n        return locus;\n        // eslint-disable-next-line no-warning-comments\n        // TODO: check where to update the sequence number\n      });\n  }\n\n  /**\n   * sends a roap media request\n   * @param {RoapOptions} options\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\nsendRoapCallRequest = (options) => {\n  const {meeting} = options;\n  const roapMessage = {\n    messageType: ROAP.ROAP_TYPES.OFFER,\n    sdps: [options.sdp],\n    version: ROAP.ROAP_VERSION,\n    seq: typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,\n    tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario\n  };\n\n  this.roapHandler.submit({\n    type: ROAP.SEND_ROAP_MSG,\n    msg: roapMessage,\n    correlationId: meeting.correlationId\n  });\n\n  const roapBody = {\n    localMedias: [\n      {\n        localSdp: JSON.stringify(this.roapRequest.attachRechabilityData({\n          roapMessage,\n          // eslint-disable-next-line no-warning-comments\n          // TODO: check whats the need for video and audiomute\n          audioMuted: !!meeting.isAudioMuted(),\n          videoMuted: !!meeting.isVideoMuted()\n        }))\n        // mediaId: meeting.mediaId\n      }\n    ]\n  };\n\n  return MeetingUtil.joinMeetingOptions(meeting, {roapMessage: roapBody})\n    .then((locus) => {\n      this.roapHandler.submit({\n        type: ROAP.SEND_ROAP_MSG_SUCCESS,\n        seq: roapMessage.seq,\n        correlationId: meeting.correlationId\n      });\n      meeting.setRoapSeq(roapMessage.seq);\n\n      // eslint-disable-next-line no-warning-comments\n      // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here\n      return locus;\n      // eslint-disable-next-line no-warning-comments\n      // TODO: check where to update the sequence number\n    });\n};\n}\n"]}