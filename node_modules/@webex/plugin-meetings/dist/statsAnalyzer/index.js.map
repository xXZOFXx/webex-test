{"version":3,"sources":["index.js"],"names":["StatsAnalyzer","config","remotecandidate","result","type","isSender","id","RemoteCandidateType","RemoteTransport","RemoteIpAddress","RemoteNetworkType","sendRecvType","candidateType","indexOf","push","transport","ipAddress","portNumber","networkType","statsResults","internal","candidates","priority","timestamp","connectionType","remote","totalRoundTripTime","bytesReceived","bytesSent","packetsReceived","packetsSent","currentRoundTripTime","availableOutgoingBitrate","availableIncomingBitrate","defaultStats","correlationId","mqaSentCount","lastMqaDataSent","resolutions","video","send","recv","audio","share","audioReceiver","mqaData","intervals","audioReceive","audioSender","audioTransmit","videoReceiver","videoReceive","videoSender","videoTransmit","shareSender","shareReceiver","isShareStream","intervalNumber","JSON","parse","emit","file","function","EVENT_TRIGGERS","MEDIA_QUALITY","peerConnection","getStatsAndParse","statsInterval","setInterval","analyzerInterval","sendMqaData","mqaInterval","MQA_INTEVAL","clearInterval","statsInterva","undefined","getStatsResult","processOutboundRTPResult","processInboundRTPResult","processTrackResult","compareSentAndReceived","getStatsResults","types","DEFAULT_GET_STATS_FILTER","forEach","includes","parseGetStatsResult","connectionState","CONNECTION_STATE","FAILED","LoggerProxy","logger","trace","videoTransceiver","sender","getStats","then","res","filterAndParseGetStatsResults","STATS","VIDEO_CORRELATE","receiver","audioTransceiver","AUDIO_CORRELATE","shareTransceiver","SHARE_CORRELATE","mediaType","sendrecvType","kilobytes","prevBytesSent","framesEncoded","keyFramesEncoded","bytes","availableBandwidth","toFixed","outboundRtpId","totalPacketsSent","log","totalKeyFramesEncoded","totalNackCount","nackCount","totalPliCount","pliCount","totalFirCount","firCount","encoderImplementation","qualityLimitationReason","qualityLimitationResolutionChanges","retransmittedPacketsSent","totalBytesSent","headerBytesSent","retransmittedBytesSent","prevBytesReceived","packetsLost","totalPacketsReceived","lastPacketReceivedTimestamp","currentPacketsLost","info","currentPacketLossRatio","totalPacketsLost","framesDecoded","keyFramesDecoded","decoderImplementation","fecPacketsDiscarded","fecPackets","fecPacketsReceived","totalBytesReceived","headerBytesReceived","jitter","remoteSource","frameWidth","frameHeight","width","height","framesSent","hugeFramesSent","framesReceived","framesDropped","trackIdentifier","jitterBufferDelay","jitterBufferEmittedCount","avgJitterDelay","totalPacketsLostOnReceiver","currentPacketLoss","packetsLostOnReceiver","roundTripTime","ssrc","reportsReceived","overAllPacketLossRatio","maxPacketLossRatio","videoPacketLossRatioThreshold","MEETING_HIGH_PACKETLOSS","packetLossRatio","EventsScope"],"mappings":"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","file":"index.js","sourcesContent":["\nimport EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS,\n  DEFAULT_GET_STATS_FILTER, CONNECTION_STATE, STATS, MQA_INTEVAL} from '../constants';\nimport mqaData from '../mediaQualityMetrics/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport defaultStats from './global';\nimport {\n  getAudioSenderMqa,\n  getAudioReceiverMqa,\n  getVideoSenderMqa,\n  getVideoReceiverMqa\n} from './mqaUtil';\n\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof StatsAnalyzer\n  */\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\nexport default class StatsAnalyzer extends EventsScope {\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   */\n  constructor(config) {\n    super();\n    this.statsResults = defaultStats;\n    this.config = config;\n    this.correlationId = config.correlationId;\n    this.mqaSentCount = 0;\n    this.lastMqaDataSent = {\n      resolutions: {video: {send: {}, recv: {}}, audio: {send: {}, recv: {}}, share: {send: {}, recv: {}}},\n      video: {send: {}, recv: {}},\n      audio: {send: {}, recv: {}},\n      share: {send: {}, recv: {}}\n    };\n  }\n\n  /**\n   * captures MQA data from peerconnection\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  sendMqaData() {\n    const audioReceiver = mqaData.intervals[0].audioReceive[0];\n    const audioSender = mqaData.intervals[0].audioTransmit[0];\n    const videoReceiver = mqaData.intervals[0].videoReceive[0];\n    const videoSender = mqaData.intervals[0].videoTransmit[0];\n    const shareSender = mqaData.intervals[0].videoTransmit[1];\n    const shareReceiver = mqaData.intervals[0].videoReceive[1];\n\n    getAudioSenderMqa({\n      audioSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getAudioReceiverMqa({\n      audioReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getVideoSenderMqa({\n      videoSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    // Capture mqa for share scenario\n\n    getVideoSenderMqa({\n      videoSender: shareSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver: shareReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n\n    this.mqaSentCount = this.mqaSentCount + 1;\n\n    mqaData.intervals[0].intervalNumber = this.mqaSentCount;\n\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastMqaDataSent = JSON.parse(JSON.stringify(this.statsResults));\n\n    this.emit(\n      {\n        file: 'statsAnalyzer',\n        function: 'sendMqaData'\n      },\n      EVENT_TRIGGERS.MEDIA_QUALITY,\n      mqaData.intervals[0]\n    );\n  }\n\n  /**\n   * updated the peerconnection when changed\n   *\n   * @private\n   * @memberof updatePeerconnection\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  updatePeerconnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  /**\n   * Starts the stats analyzer on interval\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  startAnalyzer(peerConnection) {\n    this.peerConnection = peerConnection;\n    this.getStatsAndParse();\n    this.statsInterval = setInterval(() => {\n      this.getStatsAndParse();\n    }, this.config.analyzerInterval);\n    // Trigger initial fetch\n    this.sendMqaData();\n    this.mqaInterval = setInterval(() => {\n      this.sendMqaData();\n    }, MQA_INTEVAL);\n  }\n\n  /**\n   * Cleans up the analyzer when done\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  stopAnalyzer() {\n    if (this.statsInterval) {\n      this.getStatsAndParse();\n      clearInterval(this.statsInterval);\n      this.statsInterva = undefined;\n    }\n\n    if (this.mqaInterval) {\n      this.sendMqaData();\n      clearInterval(this.mqaInterval);\n      this.statsInterva = undefined;\n    }\n    this.peerConnection = null;\n  }\n\n  /**\n   * Parse a single result of get stats\n   *\n   * @private\n   * @param {*} getStatsResult\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  parseGetStatsResult(getStatsResult, type, isSender) {\n    if (!getStatsResult) {\n      return;\n    }\n\n    switch (getStatsResult.type) {\n      case 'outbound-rtp':\n        this.processOutboundRTPResult(getStatsResult, type);\n        break;\n      case 'inbound-rtp':\n        this.processInboundRTPResult(getStatsResult, type);\n        break;\n      case 'track':\n        this.processTrackResult(getStatsResult, type);\n        break;\n      case 'remote-inbound-rtp':\n      case 'remote-outbound-rtp':\n        this.compareSentAndReceived(getStatsResult, type, isSender);\n        break;\n      case 'remotecandidate':\n      case 'remote-candidate':\n        this.remotecandidate(getStatsResult, type, isSender);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Filters the get stats results for types\n   * @private\n   * @param {Array} getStatsResults\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   */\n  filterAndParseGetStatsResults(getStatsResults, type, isSender) {\n    const {types} = DEFAULT_GET_STATS_FILTER;\n\n    getStatsResults.forEach((result) => {\n      if (types.includes(result.type)) {\n        this.parseGetStatsResult(result, type, isSender);\n      }\n    });\n  }\n\n  /**\n   * Does a `getStats` on all the transceivers and parses the results\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  getStatsAndParse() {\n    if (!this.peerConnection) {\n      return;\n    }\n\n    if (this.peerConnection && this.peerConnection.connectionState === CONNECTION_STATE.FAILED) {\n      LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state');\n\n      return;\n    }\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n    this.peerConnection.videoTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, true);\n    });\n\n    this.peerConnection.videoTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, false);\n    });\n\n    this.peerConnection.audioTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, true);\n    });\n\n    this.peerConnection.audioTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, false);\n    });\n\n    this.peerConnection.shareTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, true);\n    });\n\n    this.peerConnection.shareTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, false);\n    });\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats');\n  }\n\n  /**\n   * Processes OutboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processOutboundRTPResult(result, type) {\n    const mediaType = type || 'audio';\n    const sendrecvType = 'send';\n\n    if (result.bytesSent) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;\n      }\n\n      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n\n      kilobytes = bytes / 1024;\n\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesSent = kilobytes;\n\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n      this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsSent === 0) {\n        LoggerProxy.logger.log(`StatsAnalyzer:index#processInboundRTPResult --> No packets sent for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsSent);\n      }\n\n      // Data saved to send MQA metrics\n\n      this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      this.statsResults[mediaType][sendrecvType].encoderImplementation = result.encoderImplementation;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationReason = result.qualityLimitationReason;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges = result.qualityLimitationResolutionChanges;\n      this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent = result.retransmittedPacketsSent;\n      this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n      this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n      this.statsResults[mediaType][sendrecvType].retransmittedBytesSent = result.retransmittedBytesSent;\n    }\n  }\n\n\n  /**\n   * Processes InboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processInboundRTPResult(result, type) {\n    const mediaType = type || 'audio';\n    const sendrecvType = 'recv';\n\n    if (result.bytesReceived) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n      }\n\n      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n\n      kilobytes = bytes / 1024;\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n\n      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n      this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n        LoggerProxy.logger.info(`StatsAnalyzer:index#processInboundRTPResult --> No packets received for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsReceived);\n      }\n\n      //  Check the over all packet Lost ratio\n      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0 ? this.statsResults[mediaType][sendrecvType].currentPacketsLost / (this.statsResults[mediaType][sendrecvType].packetsReceived + this.statsResults[mediaType][sendrecvType].currentPacketsLost) : 0;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n        LoggerProxy.logger.info('StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);\n      }\n\n      this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost;\n      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n\n      // From Thin\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n      this.statsResults[mediaType][sendrecvType].decoderImplementation = result.decoderImplementation;\n      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n\n      this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n      this.statsResults[mediaType][sendrecvType].fecPackets = result.fecPacketsReceived;\n      this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n      this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n      this.statsResults[mediaType][sendrecvType].jitter = result.jitter;\n    }\n  }\n\n  /**\n   * Processes remote candidate result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @param {boolean} isSender\n   *\n   * @returns {void}\n   */\n  remotecandidate = (result, type, isSender) => {\n    if (!result || !result.id) {\n      return;\n    }\n    const RemoteCandidateType = {};\n    const RemoteTransport = {};\n    const RemoteIpAddress = {};\n    const RemoteNetworkType = {};\n\n    if (!result.id) return;\n\n    const sendRecvType = isSender ? 'send' : 'recv';\n\n    if (!RemoteCandidateType[result.id]) {\n      RemoteCandidateType[result.id] = [];\n    }\n\n    if (!RemoteTransport[result.id]) {\n      RemoteTransport[result.id] = [];\n    }\n\n    if (!RemoteIpAddress[result.id]) {\n      RemoteIpAddress[result.id] = [];\n    }\n    if (!RemoteNetworkType[result.id]) {\n      RemoteNetworkType[result.id] = [];\n    }\n\n    if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === 0) {\n      RemoteCandidateType[result.id].push(result.candidateType);\n    }\n\n    if (result.transport && RemoteTransport[result.id].indexOf(result.transport) === 0) {\n      RemoteTransport[result.id].push(result.transport);\n    }\n\n    if (result.ipAddress && RemoteIpAddress[result.id].indexOf(`${result.ipAddress}:${result.portNumber}`) === 0) {\n      RemoteIpAddress[result.id].push(`${result.ipAddress}:${result.portNumber}`);\n    }\n\n    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === 0) {\n      RemoteNetworkType[result.id].push(result.networkType);\n    }\n\n    this.statsResults.internal.candidates[result.id] = {\n      candidateType: RemoteCandidateType[result.id],\n      ipAddress: RemoteIpAddress[result.id],\n      portNumber: result.portNumber,\n      networkType: RemoteNetworkType[result.id],\n      priority: result.priority,\n      transport: RemoteTransport[result.id],\n      timestamp: result.timestamp,\n      id: result.id,\n      type: result.type\n    };\n\n    this.statsResults.connectionType.remote.candidateType = RemoteCandidateType[result.id];\n    this.statsResults.connectionType.remote.ipAddress = RemoteIpAddress[result.id];\n    this.statsResults.connectionType.remote.networkType = RemoteNetworkType[result.id];\n    this.statsResults.connectionType.remote.transport = RemoteTransport[result.id];\n\n    this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n    this.statsResults[type][sendRecvType].bytesReceived = result.bytesReceived;\n    this.statsResults[type][sendRecvType].bytesSent = result.bytesSent;\n    this.statsResults[type][sendRecvType].packetsReceived = result.packetsReceived || 0;\n    this.statsResults[type][sendRecvType].packetsSent = result.packetsSent || 0;\n    this.statsResults[type][sendRecvType].currentRoundTripTime = result.currentRoundTripTime;\n    this.statsResults[type][sendRecvType].availableOutgoingBitrate = result.availableOutgoingBitrate;\n    this.statsResults[type][sendRecvType].availableIncomingBitrate = result.availableIncomingBitrate;\n  };\n\n\n  /**\n   * Process Track results\n   *\n   * @private\n   * @param {*} result\n   * @param {*} mediaType\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  processTrackResult(result, mediaType) {\n    if (!result || result.type !== 'track') {\n      return;\n    }\n    if (result.type !== 'track') return;\n\n    const sendrecvType = result.remoteSource === true ? 'recv' : 'send';\n\n    if (result.frameWidth && result.frameHeight) {\n      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n    }\n\n    if (sendrecvType === 'recv') {\n      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n    }\n\n\n    if (result.trackIdentifier && mediaType !== 'audio') {\n      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;\n\n      const jitterBufferDelay = result && result.jitterBufferDelay;\n      const jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n\n      this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay = jitterBufferEmittedCount && (+jitterBufferDelay / +jitterBufferEmittedCount);\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  compareSentAndReceived(result, type) {\n    if (!type) {\n      return;\n    }\n\n    const mediaType = type;\n\n    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) { this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost; }\n\n    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n\n    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.jitter = result.jitter;\n    this.statsResults[mediaType].send.roundTripTime = result.roundTripTime;\n    this.statsResults[mediaType].send.timestamp = result.timestamp;\n    this.statsResults[mediaType].send.ssrc = result.ssrc;\n    this.statsResults[mediaType].send.reportsReceived = result.reportsReceived;\n\n    // Total packloss ratio on this video section of the call\n    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver / this.statsResults[mediaType].send.totalPacketsSent : 0;\n\n    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / (this.statsResults[mediaType].send.packetsSent + this.statsResults[mediaType].send.packetsLostOnReceiver) : 0;\n\n    if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {\n      this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;\n    }\n\n\n    if (this.statsResults[mediaType].send.currentPacketLossRatio > this.config.videoPacketLossRatioThreshold && mediaType === STATS.VIDEO_CORRELATE) {\n      // Trigger downgrade video callback\n      LoggerProxy.logger.log('StatsAnalyzer:index#compareSentAndReceived -->  Packet Loss is high ', this.statsResults[mediaType].send.currentPacketLossRatio);\n      this.emit(\n        {\n          file: 'statsAnalyzer',\n          function: 'compareSentAndReceived'\n        },\n        EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,\n        {\n          mediaType,\n          packetLossRatio: this.statsResults[mediaType].send.currentPacketLossRatio\n        }\n      );\n    }\n  }\n}\n"]}