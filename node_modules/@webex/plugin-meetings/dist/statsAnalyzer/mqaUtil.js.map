{"version":3,"sources":["mqaUtil.js"],"names":["getAudioReceiverMqa","audioReceiver","statsResults","lastMqaDataSent","mediaType","sendrecvType","streams","common","rtpPackets","totalPacketsReceived","mediaHopByHopLost","totalPacketsLost","rtpHopByHopLost","rtpJitter","jitter","rtpEndToEndLost","framesReceived","resolutions","receivedFrameRate","receivedBitrate","totalBytesReceived","getAudioSenderMqa","audioSender","remoteJitter","totalPacketsSent","availableBitrate","availableOutgoingBitrate","totalpacketsLostForaMin","totalPacketsLostOnReceiver","remoteLossRate","roundTripTime","totalBytesSentInaMin","totalBytesSent","transmittedBitrate","transmittedKeyFrames","totalKeyFramesEncoded","requestedKeyFrames","totalFirCount","getVideoReceiverMqa","videoReceiver","isShareStream","totalPacketLoss","totalBytesReceivedInaMin","totalFrameReceivedInaMin","receivedHeight","height","receivedWidth","width","receivedFrameSize","getVideoSenderMqa","videoSender","totalFrameSentInaMin","framesSent","transmittedFrameRate","transmittedHeight","transmittedWidth","transmittedFrameSize"],"mappings":";;;;;AAAO,IAAMA,oDAAsB,SAAtBA,mBAAsB,OAAoD;AAAA,MAAlDC,aAAkD,QAAlDA,aAAkD;AAAA,MAAnCC,YAAmC,QAAnCA,YAAmC;AAAA,MAArBC,eAAqB,QAArBA,eAAqB;;AACrF,MAAMC,YAAY,OAAlB;AACA,MAAMC,eAAe,MAArB;;AAEA;AACAJ,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCC,UAAhC,GAA6CN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCI,oBAAtC,GAA6DN,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCI,oBAAnJ;;AAEA;AACAR,gBAAcM,MAAd,CAAqBG,iBAArB,GAA0CR,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCM,gBAAtC,GAAyDR,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCM,gBAAnG,IAAwH,CAAjK;AACAV,gBAAcM,MAAd,CAAqBK,eAArB,GAAuCV,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCM,gBAAtC,GAAyDR,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCM,gBAAlG,IAAsH,CAA7J;AACAV,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCM,SAAhC,GAA4CX,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCS,MAAtC,GAA+C,IAA3F;;AAEAb,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCQ,eAAhC,GAAkDb,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCM,gBAAtC,GAAyDR,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCM,gBAAlG,IAAsH,CAAxK;AACAV,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCS,cAAhC,GAAiDd,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDW,cAAlD,GAAmEb,gBAAgBc,WAAhB,CAA4Bb,SAA5B,EAAuCC,YAAvC,EAAqDW,cAAxH,IAA0I,CAA3L;AACAf,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCW,iBAAhC,GAAoDjB,cAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCS,cAAhC,GAAiD,GAAjD,GAAuD,EAAvD,IAA6D,CAAjH;AACAf,gBAAcK,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCY,eAAhC,GAAkD,CAACjB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCe,kBAAtC,GAA2DjB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCe,kBAArG,IAA2H,CAA3H,GAA+H,EAA/H,IAAqI,CAAvL;AACD,CAhBM;;AAmBA,IAAMC,gDAAoB,SAApBA,iBAAoB,QAAkD;AAAA,MAAhDC,WAAgD,SAAhDA,WAAgD;AAAA,MAAnCpB,YAAmC,SAAnCA,YAAmC;AAAA,MAArBC,eAAqB,SAArBA,eAAqB;;AACjF,MAAMC,YAAY,OAAlB;AACA,MAAMC,eAAe,MAArB;;AAEAiB,cAAYf,MAAZ,CAAmBgB,YAAnB,GAAkCrB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCS,MAAtC,GAA+C,IAAjF;AACAQ,cAAYf,MAAZ,CAAmBC,UAAnB,GAAgCN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCmB,gBAAtC,GAAyDrB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCmB,gBAAlG,IAAsH,CAAtJ;;AAEA;AACAF,cAAYf,MAAZ,CAAmBkB,gBAAnB,GAAsCvB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCqB,wBAAtC,IAAkE,CAAxG;AACA;;AAEA,MAAMC,0BAA0BzB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCuB,0BAAtC,GAAmEzB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCuB,0BAA5I;;AAEAN,cAAYf,MAAZ,CAAmBsB,cAAnB,GAAoCF,0BAA0B,CAA1B,GAA+BA,0BAA0B,GAA1B,GAAgCL,YAAYf,MAAZ,CAAmBC,UAAlF,GAAgG,CAApI,CAbiF,CAasD;AACvIc,cAAYf,MAAZ,CAAmBuB,aAAnB,GAAmC5B,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCyB,aAAtC,GAAsD,IAAtD,IAA8D,CAAjG;AACAR,cAAYhB,OAAZ,CAAoB,CAApB,EAAuBC,MAAvB,CAA8BC,UAA9B,GAA2CN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCmB,gBAAtC,GAAyDrB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCmB,gBAAlG,IAAsH,CAAjK;;AAEA;AACA,MAAMO,uBAAuB7B,aAAaE,SAAb,EAAwBC,YAAxB,EAAsC2B,cAAtC,GAAuD7B,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC2B,cAA7H;;AAEAV,cAAYhB,OAAZ,CAAoB,CAApB,EAAuBC,MAAvB,CAA8B0B,kBAA9B,GAAmDF,uBAAwBA,oBAAD,GAAyB,CAAzB,GAA6B,EAApD,GAAyD,CAA5G;AACAT,cAAYhB,OAAZ,CAAoB,CAApB,EAAuB4B,oBAAvB,GAA8ChC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsC8B,qBAAtC,GAA8DhC,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC8B,qBAAvG,IAAgI,CAA9K;AACAb,cAAYhB,OAAZ,CAAoB,CAApB,EAAuB8B,kBAAvB,GAA4ClC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCgC,aAAtC,GAAsDlC,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCgC,aAA/F,IAAgH,CAA5J;AACD,CAvBM;;AA0BA,IAAMC,oDAAsB,SAAtBA,mBAAsB,QAE7B;AAAA,MADJC,aACI,SADJA,aACI;AAAA,MADWrC,YACX,SADWA,YACX;AAAA,MADyBC,eACzB,SADyBA,eACzB;AAAA,kCAD0CqC,aAC1C;AAAA,MAD0CA,aAC1C,uCAD0D,KAC1D;;AACJ,MAAMpC,YAAYoC,gBAAgB,OAAhB,GAA0B,OAA5C;AACA,MAAMnC,eAAe,MAArB;;AAEA;AACAkC,gBAAchC,MAAd,CAAqBC,UAArB,GAAkCN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCI,oBAAtC,GAA6DN,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCI,oBAAtG,IAA8H,CAAhK;;AAGA,MAAMgC,kBAAmBvC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCM,gBAAtC,GAAyDR,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCM,gBAAnG,IAAwH,CAAhJ;;AAEA;AACA4B,gBAAchC,MAAd,CAAqBG,iBAArB,GAAyC+B,eAAzC,CAXI,CAWsD;AAC1DF,gBAAchC,MAAd,CAAqBK,eAArB,GAAuC6B,eAAvC,CAZI,CAYoD;AACxDF,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCM,SAAhC,GAA4CX,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCS,MAAtC,GAA+C,IAA3F;AACAyB,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCQ,eAAhC,GAAkD0B,eAAlD,CAdI,CAc8D;;AAElE;AACA,MAAMC,2BAA2BxC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCe,kBAAtC,GAA2DjB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCe,kBAArI;;AAEAmB,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCY,eAAhC,GAAkDuB,2BAA4BA,wBAAD,GAA6B,CAA7B,GAAiC,EAA5D,GAAiE,CAAnH;AACA;AACA,MAAMC,2BAA2BzC,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDW,cAAlD,GAAmEb,gBAAgBc,WAAhB,CAA4Bb,SAA5B,EAAuCC,YAAvC,EAAqDW,cAAzJ;;AAEAuB,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBC,MAAzB,CAAgCW,iBAAhC,GAAoDyB,2BAA2BA,2BAA2B,GAA3B,GAAiC,EAA5D,GAAiE,CAArH;;AAEAJ,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBsC,cAAzB,GAA0C1C,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDwC,MAA5F;AACAN,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyBwC,aAAzB,GAAyC5C,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkD0C,KAA3F;;AAEAR,gBAAcjC,OAAd,CAAsB,CAAtB,EAAyB0C,iBAAzB,GAA6C9C,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDwC,MAAlD,GAA2D3C,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDwC,MAA7G,GAAsH,GAAnK;AACD,CA/BM;;AAiCA,IAAMI,gDAAoB,SAApBA,iBAAoB,QAE3B;AAAA,MADJC,WACI,SADJA,WACI;AAAA,MADShD,YACT,SADSA,YACT;AAAA,MADuBC,eACvB,SADuBA,eACvB;AAAA,kCADwCqC,aACxC;AAAA,MADwCA,aACxC,uCADwD,KACxD;;AACJ,MAAMpC,YAAYoC,gBAAgB,OAAhB,GAA0B,OAA5C;AACA,MAAMnC,eAAe,MAArB;;AAEA6C,cAAY3C,MAAZ,CAAmBgB,YAAnB,GAAkCrB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCS,MAAtC,GAA+C,IAAjF;AACAoC,cAAY3C,MAAZ,CAAmBC,UAAnB,GAAgCN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCmB,gBAAtC,GAAyDrB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCmB,gBAAlG,IAAsH,CAAtJ;AACA0B,cAAY3C,MAAZ,CAAmBkB,gBAAnB,GAAsCvB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCqB,wBAAtC,IAAkE,CAAxG;AACA;;AAEA,MAAMC,0BAA0BzB,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCuB,0BAAtC,GAAmEzB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCuB,0BAA5I;;AAEAsB,cAAY3C,MAAZ,CAAmBsB,cAAnB,GAAoCF,0BAA0B,CAA1B,GAA+BA,uBAAD,GAA4B,GAA5B,IAAmCuB,YAAY3C,MAAZ,CAAmBC,UAAnB,GAAgCmB,uBAAnE,CAA9B,GAA4H,CAAhK,CAXI,CAW+J;;AAEnKuB,cAAY3C,MAAZ,CAAmBuB,aAAnB,GAAmC5B,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCyB,aAAtC,GAAsD,IAAtD,IAA8D,CAAjG;AACAoB,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBC,MAAvB,CAA8BC,UAA9B,GAA2CN,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCmB,gBAAtC,GAAyDrB,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCmB,gBAA7I;;AAEA;AACA,MAAMO,uBAAuB7B,aAAaE,SAAb,EAAwBC,YAAxB,EAAsC2B,cAAtC,GAAuD7B,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC2B,cAA7H;;AAEAkB,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBC,MAAvB,CAA8B0B,kBAA9B,GAAmDF,uBAAwBA,oBAAD,GAAyB,CAAzB,GAA6B,EAApD,GAAyD,CAA5G;AACAmB,cAAY5C,OAAZ,CAAoB,CAApB,EAAuB4B,oBAAvB,GAA8ChC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsC8B,qBAAtC,GAA8DhC,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC8B,qBAAvG,IAAgI,CAA9K;AACAe,cAAY5C,OAAZ,CAAoB,CAApB,EAAuB8B,kBAAvB,GAA4ClC,aAAaE,SAAb,EAAwBC,YAAxB,EAAsCgC,aAAtC,GAAsDlC,gBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCgC,aAA/F,IAAgH,CAA5J;;AAEA;AACA,MAAMc,uBAAuBjD,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkD+C,UAAlD,IAAgEjD,gBAAgBc,WAAhB,CAA4Bb,SAA5B,EAAuCC,YAAvC,EAAqD+C,UAArD,IAAmE,CAAnI,CAA7B;;AAEAF,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBC,MAAvB,CAA8B8C,oBAA9B,GAAqDF,uBAAuBA,uBAAuB,GAAvB,GAA6B,EAApD,GAAyD,CAA9G;AACAD,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBgD,iBAAvB,GAA2CpD,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDwC,MAA7F;AACAK,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBiD,gBAAvB,GAA0CrD,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkD0C,KAA5F;AACAG,cAAY5C,OAAZ,CAAoB,CAApB,EAAuBkD,oBAAvB,GAA8CtD,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkDwC,MAAlD,GAA2D3C,aAAae,WAAb,CAAyBb,SAAzB,EAAoCC,YAApC,EAAkD0C,KAA7G,GAAqH,GAAnK;AACD,CAhCM","file":"mqaUtil.js","sourcesContent":["export const getAudioReceiverMqa = ({audioReceiver, statsResults, lastMqaDataSent}) => {\n  const mediaType = 'audio';\n  const sendrecvType = 'recv';\n\n  // collect the packets received for the last min\n  audioReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived;\n\n  // Hop by hop are numbers and not percentage so we compare on what we sent the last min\n  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n  audioReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000;\n\n  audioReceiver.streams[0].common.rtpEndToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n  audioReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived || 0;\n  audioReceiver.streams[0].common.receivedFrameRate = audioReceiver.streams[0].common.framesReceived * 100 / 60 || 0;\n  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;\n};\n\n\nexport const getAudioSenderMqa = ({audioSender, statsResults, lastMqaDataSent}) => {\n  const mediaType = 'audio';\n  const sendrecvType = 'send';\n\n  audioSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000;\n  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n\n  // From candidate-pair\n  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets) : 0; // This is the packets sent with in last min || 0;\n  audioSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;\n  audioSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n};\n\n\nexport const getVideoReceiverMqa = ({\n  videoReceiver, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? 'share' : 'video';\n  const sendrecvType = 'recv';\n\n  // collect the packets received for the last min\n  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n\n\n  const totalPacketLoss = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n\n  // Hope by hop are numbers and not percentage so we compare on what we sent the last min\n  videoReceiver.common.mediaHopByHopLost = totalPacketLoss; // TODO: calculate the value\n  videoReceiver.common.rtpHopByHopLost = totalPacketLoss; // TODO: calculate the value\n  videoReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000;\n  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss;// TODO: calculate the value\n\n  // Calculate the outgoing bitrate\n  const totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;\n\n  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? (totalBytesReceivedInaMin) * 8 / 60 : 0;\n  // From tracks //TODO: calculate a proper one\n  const totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;\n\n  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;\n\n  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n\n  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;\n};\n\nexport const getVideoSenderMqa = ({\n  videoSender, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? 'share' : 'video';\n  const sendrecvType = 'send';\n\n  videoSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000;\n  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;\n\n  videoSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;\n  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);\n\n  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;\n  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;\n};\n"]}