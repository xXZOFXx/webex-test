'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getAudioReceiverMqa = exports.getAudioReceiverMqa = function getAudioReceiverMqa(_ref) {
  var audioReceiver = _ref.audioReceiver,
      statsResults = _ref.statsResults,
      lastMqaDataSent = _ref.lastMqaDataSent;

  var mediaType = 'audio';
  var sendrecvType = 'recv';

  // collect the packets received for the last min
  audioReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived;

  // Hop by hop are numbers and not percentage so we compare on what we sent the last min
  audioReceiver.common.mediaHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;
  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;
  audioReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000;

  audioReceiver.streams[0].common.rtpEndToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;
  audioReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived || 0;
  audioReceiver.streams[0].common.receivedFrameRate = audioReceiver.streams[0].common.framesReceived * 100 / 60 || 0;
  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;
};

var getAudioSenderMqa = exports.getAudioSenderMqa = function getAudioSenderMqa(_ref2) {
  var audioSender = _ref2.audioSender,
      statsResults = _ref2.statsResults,
      lastMqaDataSent = _ref2.lastMqaDataSent;

  var mediaType = 'audio';
  var sendrecvType = 'send';

  audioSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000;
  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;

  // From candidate-pair
  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  var totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;
  audioSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;
  audioSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;

  // Calculate the outgoing bitrate
  var totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? totalBytesSentInaMin * 8 / 60 : 0;
  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;
  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;
};

var getVideoReceiverMqa = exports.getVideoReceiverMqa = function getVideoReceiverMqa(_ref3) {
  var videoReceiver = _ref3.videoReceiver,
      statsResults = _ref3.statsResults,
      lastMqaDataSent = _ref3.lastMqaDataSent,
      _ref3$isShareStream = _ref3.isShareStream,
      isShareStream = _ref3$isShareStream === undefined ? false : _ref3$isShareStream;

  var mediaType = isShareStream ? 'share' : 'video';
  var sendrecvType = 'recv';

  // collect the packets received for the last min
  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;

  var totalPacketLoss = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;

  // Hope by hop are numbers and not percentage so we compare on what we sent the last min
  videoReceiver.common.mediaHopByHopLost = totalPacketLoss; // TODO: calculate the value
  videoReceiver.common.rtpHopByHopLost = totalPacketLoss; // TODO: calculate the value
  videoReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000;
  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss; // TODO: calculate the value

  // Calculate the outgoing bitrate
  var totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;

  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? totalBytesReceivedInaMin * 8 / 60 : 0;
  // From tracks //TODO: calculate a proper one
  var totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;

  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;

  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;
  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;

  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;
};

var getVideoSenderMqa = exports.getVideoSenderMqa = function getVideoSenderMqa(_ref4) {
  var videoSender = _ref4.videoSender,
      statsResults = _ref4.statsResults,
      lastMqaDataSent = _ref4.lastMqaDataSent,
      _ref4$isShareStream = _ref4.isShareStream,
      isShareStream = _ref4$isShareStream === undefined ? false : _ref4$isShareStream;

  var mediaType = isShareStream ? 'share' : 'video';
  var sendrecvType = 'send';

  videoSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000;
  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;
  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  var totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? totalpacketsLostForaMin * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;

  videoSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;
  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;

  // Calculate the outgoing bitrate
  var totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? totalBytesSentInaMin * 8 / 60 : 0;
  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;
  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;

  // From tracks //TODO: calculate a proper one
  var totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);

  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;
  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;
  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;
  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;
};
//# sourceMappingURL=mqaUtil.js.map
