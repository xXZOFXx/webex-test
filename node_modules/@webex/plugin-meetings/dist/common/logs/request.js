'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _loggerProxy = require('./logger-proxy');

var _loggerProxy2 = _interopRequireDefault(_loggerProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class LogsRequest
 */
var LogsRequest = function () {
  /**
   *
   * @param {Object} options
   * @param {Object} options.webex Webex SDK instance
   * @param {ClientMetrics} metrics
   */
  function LogsRequest(options) {
    (0, _classCallCheck3.default)(this, LogsRequest);

    this.webex = options.webex;
  }

  /**
   * Uploads logs to the support server
   *
   * @param {Object} [options={}]
   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking
   * @param {String} [options.locusId]
   * @param {Stirng} [options.correlationId]
   * @returns {Promise.<String>} Feedback ID
   * @memberof LogsRequest
   */


  (0, _createClass3.default)(LogsRequest, [{
    key: 'uploadLogs',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var id, locusId, correlationId;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                id = options.feedbackId || _uuid2.default.v4();
                locusId = options.locusId, correlationId = options.correlationId;


                _loggerProxy2.default.logger.info('Logs:request#uploadLogs --> uploading user logs for feedbackId: ' + id);

                _context.prev = 3;
                _context.next = 6;
                return this.webex.internal.support.submitLogs({ feedbackId: id, locusId: locusId, correlationId: correlationId });

              case 6:
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context['catch'](3);

                _loggerProxy2.default.logger.error('Logs:request#uploadLogs --> uploading user logs failed', _context.t0);

              case 11:
                return _context.abrupt('return', id);

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 8]]);
      }));

      function uploadLogs() {
        return _ref.apply(this, arguments);
      }

      return uploadLogs;
    }()
  }]);
  return LogsRequest;
}();

exports.default = LogsRequest;
//# sourceMappingURL=request.js.map
