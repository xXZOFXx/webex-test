{"version":3,"sources":["index.js"],"names":["logRequest","request","header","success","failure","LoggerProxy","logger","info","then","arg","catch","error","Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","audioVideo","VIDEO_RESOLUTIONS","mediaProperties","localQualityLevel","sharePreferences","sendAudio","sendVideo","sendShare","Media","getSupportedDevice","reject","MediaError","devicePermissions","getUserMedia","isSharing","config","metricName","METRICS_OPERATIONAL_MEASURES","GET_USER_MEDIA_FAILURE","data","correlation_id","correlationId","locus_id","locusUrl","split","pop","reason","message","metadata","type","name","Metrics","sendOperationalMetric","getSupportedDevices","getDevices","id","uuid","v4","userId","orgId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","locus","url","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","video","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","convoUrl","sipUri","partner","owner","hostId","policy","meetingRequest","MeetingRequest","locusInfo","LocusInfo","updateMeetingObject","bind","MediaProperties","inMeetingActions","InMeetingActions","callEvents","floorGrantPending","mediaQualityMetrics","statsAnalyzer","mqaProcessor","networkStatus","setUpLocusInfoListeners","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","setUpLocusInfoMediaInactiveListener","on","EVENTS","DISCONNECT_DUE_TO_INACTIVITY","res","reconnect","LOCUS_INFO_CAN_ASSIGN_HOST","payload","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_MEETING_STATE_CHANGE","MEETING_STATE_CHANGE","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","identifiers","deviceId","locusId","locusStartTime","fullState","lastActive","MQA_STATS","CA_TYPE","initMediaPayload","initPayload","getAnalyzerMetricsPrePayload","internal","metrics","submitCallDiagnosticEvents","clientType","subClientType","NETWORK_STATUS","DISCONNECTED","MEETINGS_NETWORK_DISCONNECTED","CONNECTED","MEETINGS_NETWORK_CONNECTED","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","newSelf","state","MEETING_STATE","STATES","JOINED","share","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","LOCUS_INFO_UPDATE_MEDIA_SHARES","current","contentId","disposition","selfId","FLOOR_ACTION","RELEASED","updateShare","receiveShare","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","newCanLock","newCanUnlock","self","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","SELF_MUTED_BY_OTHERS","MEETING_SELF_MUTED_BY_OTHERS","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","postEvent","eventType","LOBBY_ENTERED","meeting","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","REMOTE_ANSWERED_DECLINED","remote","DESTROY_MEETING","wirelessShare","shareTrack","onended","stop","shouldLeave","leave","warn","cleanUp","meetingId","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","memberId","removeMember","mute","muteMember","transferHostToMember","mqaInterval","clearInterval","automaticMetrics","StatsMetrics","getStats","initialize","setStats","setInterval","processMQAData","mqaMetricsInterval","MQAProcessor","DATA_PLACEMENTS","sendRecvData","toLowerCase","endsWith","STATS","SENDER","getSender","RECEIVER","getReceiver","mqa","getMQA","interval","getSlice","process","override","createStats","log","StatsUtil","generateOptions","CONFIG","WebRTCStats","destroySenders","destroyReceivers","isMuted","isSelf","body","errors","conversationUrl","setSipUri","sipMeetingUri","setLocus","participants","getLocusPartner","_CALL_","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","mediaId","host","initialSetup","pc","ontrack","streams","remoteStream","MEDIA_READY","EVENT_TYPES","REMOTE_AUDIO","stream","MediaUtil","createMediaStream","getAudioTracks","REMOTE_VIDEO","getVideoTracks","setRemoteShare","REMOTE_SHARE","remoteShare","unsetRemoteStream","stopStream","MEDIA_STOPPED","REMOTE","localStream","getTrack","audioTrack","videoTrack","settings","getSettings","setMediaSettings","echoCancellation","noiseSuppression","mediaSettings","setLocalAudioTrack","setLocalVideoTrack","aspectRatio","frameRate","height","width","LOCAL","localShare","setLocalShareTrack","contentTracks","displaySurface","cursor","screen","MEETING_REMOVED_REASON","USER_ENDED_SHARE_STREAMS","stopShare","LOCAL_SHARE","stopTracks","unsetLocalVideoTrack","unsetLocalShareTrack","mercury","ONLINE","PeerConnectionManager","close","peerConnection","unsetPeerConnection","reconnection","detection","off","toggle","ParameterError","LOG_HEADER","MUTED","USER_INTERACTION","mediaType","AUDIO","resolve","e","UNMUTED","VIDEO","joinOptions","audioVideoOptions","join","joinResponse","addMedia","mediaResponse","media","local","validate","ReconnectInProgress","MEETING_RECONNECTION_STARTING","MEETING_RECONNECTION_SUCCESS","MEETING_RECONNECTION_FAILURE","ReconnectionError","finally","reset","CALL_INITIATED","pstnAudioType","MEETING_STATE_MACHINE","ENDED","RINGING","ring","_JOIN_","resourceId","destination","meetingQuality","QUALITY_LEVELS","errorMessage","Error","setLocalQualityLevel","setRemoteQualityLevel","joinMeetingOptions","fail","mediaCapabilities","rx","share_audio","whiteboard","tx","moveMedia","moveToResource","updateMedia","receiveVideo","receiveAudio","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","isGuestUnjoined","guest","MEDIA_CAPABILITIES","validateOptions","setMediaPeerConnection","createPeerConnection","setReconnectListener","setPeerConnectionEvents","preMedia","attachMedia","remoteQualityLevel","setRemoteStream","startInternalStats","autoSendMQA","startMediaQualityMetrics","enableStatsAnalyzer","StatsAnalyzer","MEDIA_QUALITY","intervalData","MEETING_HIGH_PACKETLOSS","autoDowngradeEnabled","canUpdateMedia","HIGH","setLocalVideoQuality","MEDIUM","LOW","packetLossRatio","startAnalyzer","err","timerCount","joiningTimer","meetingState","FULL_STATE","ACTIVE","sendRoapMediaRequest","sdp","signalingState","SDP","STABLE","previousSendShareStatus","setContentSlides","checkForStopShare","startShare","audioTransceiver","track","previousMediaDirection","sendTrack","receiveTrack","updateTransceiver","transceiver","setLocalTracks","AudioStateMachine","videoTransceiver","VideoStateMachine","previousShareStatus","shareTransceiver","setMediaDirection","_INCOMING_","acknowledgeMeeting","response","ALERT_DISPLAYED","_BUSY_","declineMeeting","decline","LEAVE","canProceed","leaveReason","CLIENT_LEAVE_REQUEST","content","mediaShares","find","element","CONTENT","SHARE_INITIATED","changeMeetingFloor","GRANTED","personUrl","uri","resourceUrl","MEETING_STARTED_SHARING_LOCAL","LOCAL_SHARE_FLOOR_GRANTED","SHARE_STOPPED","MEETING_STOPPED_SHARING_LOCAL","SHARE_STOPPED_REASON","SELF_STOPPED","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","tones","enableDTMF","sendDTMF","layoutType","LAYOUT_TYPES","includes","changeVideoLayout","onFullLocus","level","updateVideo","previousLevel","shareConstraints","getDisplayMedia","shareStream","GET_DISPLAY_MEDIA_FAILURE","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport StatsAnalyzer from '../statsAnalyzer';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsMetrics from '../stats/metrics';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport {\n  MEETINGS,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS,\n  MQA_STATS,\n  MEETING_STATE,\n  METRICS_OPERATIONAL_MEASURES,\n  FULL_STATE,\n  MEETING_REMOVED_REASON,\n  SHARE_STOPPED_REASON,\n  SDP,\n  QUALITY_LEVELS,\n  VIDEO_RESOLUTIONS,\n  VIDEO,\n  LAYOUT_TYPES,\n  NETWORK_STATUS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\nimport MQAProcessor from '../metrics/mqa-processor';\n\nimport InMeetingActions from './in-meeting-actions';\n\nconst logRequest = (request, {header = '', success = '', failure = ''}) => {\n  LoggerProxy.logger.info(header);\n\n  return request\n    .then((arg) => {\n      LoggerProxy.logger.info(success);\n\n      return arg;\n    })\n    .catch((error) => {\n      LoggerProxy.logger.error(failure, error);\n      throw error;\n    });\n};\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n * @property {boolean} isSharing\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [pin]\n * @property {Boolean} [moderator]\n * @property {String|Object} [meetingQuality]\n * @property {String} [meetingQuality.local]\n * @property {String} [meetingQuality.remote]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * Organization ID\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.orgId = attrs.orgId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.webex, this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {StatsAnalyzer}\n     * @private\n     * @memberof Meeting\n     */\n    this.statsAnalyzer = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mqaProcessor = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.networkStatus = null;\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n    this.setUpLocusInfoMediaInactiveListener();\n  }\n\n\n  /**\n   * Set up the locus info listener for meetings disconnected due to inactivity\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMediaInactiveListener() {\n    this.locusInfo.on(EVENTS.DISCONNECT_DUE_TO_INACTIVITY, (res) => {\n      // TODO: need to send metric for locus disconnect\n      LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMediaInactiveListener --> Meeting disconnected due to inactivity: ${res.reason}`);\n      this.reconnect();\n    });\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        },\n        EVENT_TRIGGERS.MEETING_STATE_CHANGE,\n        {\n          payload\n        }\n      );\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * get the metrics payload pre\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Object}\n   * @memberof Meeting\n   */\n  getAnalyzerMetricsPrePayload(options) {\n    if (options) {\n      const {event, trackingId, locus} = options;\n\n      if (!event) {\n        LoggerProxy.logger.error('Meeting:index#getAnalyzerMetricsPrePayload --> Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n        return null;\n      }\n\n      const identifiers = {\n        correlationId: this.correlationId,\n        userId: this.userId,\n        deviceId: this.deviceUrl,\n        orgId: this.orgId\n      };\n\n      // If locus is passed take the value from there else use meeting object\n      if (locus) {\n        identifiers.locusId = locus.url.split('/').pop();\n        identifiers.locusStartTime = locus.fullState.lastActive;\n      }\n      else if (this.locusUrl && this.locusInfo.fullState) {\n        identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n        identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n      }\n\n      if (options.trackingId) {\n        identifiers.trackingId = trackingId;\n      }\n\n      let payload = {};\n\n      if (options.type === MQA_STATS.CA_TYPE) {\n        payload = Metrics.initMediaPayload(options.event, identifiers, options);\n      }\n\n      else {\n        payload = Metrics.initPayload(options.event, identifiers, options);\n      }\n\n      return payload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Send the metrics to Media Quality Analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendMediaQualityAnalyzerMetrics(options) {\n    options.type = MQA_STATS.CA_TYPE;\n    options.clientType = this.config.metrics.clientType;\n    options.subClientType = this.config.metrics.subClientType;\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * sets the network status on meeting object\n   * @param {String} networkStatus\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  setNetworkStatus(networkStatus) {\n    if (networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_DISCONNECTED,\n      );\n    }\n    else if (networkStatus === NETWORK_STATUS.CONNECTED && this.networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_CONNECTED,\n      );\n    }\n\n    this.networkStatus = networkStatus;\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      const {contentId, disposition} = payload.current;\n\n      // Check if screenshare is being taken over by a remote\n      // If so, terminate the share and allow the remote to be on the floor\n      // Terminating the share allows the user to screenshare again without any issues\n      if (\n        this.isSharing &&\n        this.selfId !== contentId &&\n        disposition !== FLOOR_ACTION.RELEASED\n      ) {\n        this.isSharing = false;\n        this.updateShare({\n          sendShare: false,\n          receiveShare: this.mediaProperties.mediaDirection.receiveShare\n        });\n      }\n\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.warn('Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        LoggerProxy.logger.info('Meeting:index#setUpLocusInfoMeetingListener --> MEETING_REMOVED_REASON', payload.reason);\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: payload.reason,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n   * not restart unless the start function is called again\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  cleanMQAInterval() {\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n    }\n  }\n\n  /**\n   * Automatically publishes media metrics data and on a config interval\n   * uses the existing getStats data filter, so no new streams are created\n   * but it is separate than history, so history will not be available\n   * @returns {MediaMetrics}\n   * @public\n   * @memberof Meeting\n   */\n  startMediaQualityMetrics() {\n    const automaticMetrics = new StatsMetrics({config: this.config});\n\n    const stats = this.getStats(automaticMetrics.initialize(), true);\n\n    this.mediaQualityMetrics = automaticMetrics;\n\n    this.mediaQualityMetrics.setStats(stats);\n\n    this.mqaInterval = setInterval(() => this.processMQAData(), this.config.metrics.mqaMetricsInterval);\n\n    return automaticMetrics;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  processMQAData() {\n    if (!this.mqaProcessor) {\n      this.mqaProcessor = new MQAProcessor();\n    }\n\n    MQA_STATS.DATA_PLACEMENTS.forEach((key) => {\n      if (this.mediaQualityMetrics && this.mediaQualityMetrics.stats) {\n        let sendRecvData;\n\n        if (key.toLowerCase().endsWith(STATS.SENDER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getSender(key);\n        }\n        else if (key.toLowerCase().endsWith(STATS.RECEIVER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getReceiver(key);\n        }\n        let mqa;\n\n        if (sendRecvData) {\n          mqa = sendRecvData.getMQA();\n        }\n        if (mqa) {\n          const interval = mqa.getSlice(this.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n          this.mqaProcessor.process(key, interval);\n        }\n      }\n    });\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoUrl = meetingInfo.body.conversationUrl || this.convoUrl;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index#setRemoteStream --> ontrack event received for peerConnection: ${event}`);\n      // const {transceiver} = event;\n      const streams = event.streams[0];\n\n      this.mediaProperties.remoteStream = streams;\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_AUDIO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getAudioTracks()[0]])\n        }\n      );\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_VIDEO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[0]])\n        }\n      );\n\n      if (this.mediaProperties.remoteStream.getVideoTracks()[1]) {\n        this.mediaProperties.setRemoteShare(MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[1]]));\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: EVENT_TYPES.REMOTE_SHARE,\n            stream: this.mediaProperties.remoteShare\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: EVENT_TYPES.REMOTE\n        }\n      );\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_SHARE,\n          stream: this.mediaProperties.remoteShare\n        }\n      );\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n      let settings = null;\n\n      if (audioTrack) {\n        settings = audioTrack.getSettings();\n        this.mediaProperties.setMediaSettings('audio', {\n          echoCancellation: settings.echoCancellation,\n          noiseSuppression: settings.noiseSuppression\n        });\n\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n        this.mediaProperties.setLocalAudioTrack(audioTrack);\n      }\n\n      if (videoTrack) {\n        settings = videoTrack.getSettings();\n        this.mediaProperties.setLocalVideoTrack(videoTrack);\n        this.mediaProperties.setMediaSettings('video', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width\n        });\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n      }\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave({reason: MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS});\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopTracks(this.mediaProperties.audioTrack)\n      .then(() => Media.stopTracks(this.mediaProperties.videoTrack))\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalStream'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL\n          }\n        );\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopTracks(this.mediaProperties.shareTrack).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: EVENT_TYPES.LOCAL_SHARE\n        }\n      );\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setReconnectListener() {\n    // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n    // if the meeting has active peer connections, it should try to reconnect.\n    this.webex.internal.mercury.on(ONLINE, () => {\n      LoggerProxy.logger.log('Meeting:index#setReconnectListener --> Web socket online');\n    });\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteAudio -->';\n\n    LoggerProxy.logger.info(`${LOG_HEADER} Muting Audio`);\n\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        LoggerProxy.logger.info(`${LOG_HEADER} Audio mute successful.`);\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n\n        return Promise.resolve();\n      })\n      .catch((e) => {\n        LoggerProxy.logger.error(`${LOG_HEADER} Audio mute error ${e}`);\n      });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteAudio -->';\n\n    return logRequest(this.audio.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} Unmuting Audio`,\n      success: `${LOG_HEADER} Unmuted audio successfully`,\n      failure: `${LOG_HEADER} Unmuting Audio failed, `\n    });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteVideo -->';\n\n    return logRequest(this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} Muting Video`,\n      success: `${LOG_HEADER} Muted Video successfully`,\n      failure: `${LOG_HEADER} Muting Video failed, `\n    });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteVideo -->';\n\n    return logRequest(this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} Unmuting Video`,\n      success: `${LOG_HEADER} Unmuted Video successfully`,\n      failure: `${LOG_HEADER} Unmuting Video failed, `\n    });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    return this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => ({\n            join: joinResponse,\n            media: mediaResponse,\n            local: [localStream, localShare]\n          }))))\n      .catch((error) => {\n        LoggerProxy.logger.error('Meeting:index#joinWithMedia --> ', error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   *\n   * @param {object} options\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect(options) {\n    LoggerProxy.logger.log('Meeting:index#reconnect --> attempting to reconnect');\n\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n\n    try {\n      LoggerProxy.logger.info('Meeting:index#reconnect --> Validating reconnect ability.');\n      this.reconnectionManager.validate();\n    }\n    catch (error) {\n      // Unable to reconnect this call\n      if (error instanceof ReconnectInProgress) {\n        LoggerProxy.logger.info('Meeting:index#reconnect --> Unable to reconnect, reconnection in progress.');\n      }\n      else {\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Unable to reconnect.', error);\n      }\n\n      return Promise.resolve();\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n\n\n    return this.reconnectionManager\n      .reconnect(options)\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS\n        );\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Meeting reconnect success');\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n\n        LoggerProxy.logger.error('Meeting:index#reconnect --> Meeting reconnect failed', error);\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally(() => {\n        this.reconnectionManager.reset();\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room\n   * Scenario B: Joining other's claimed personal meeting room, do pass pin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass pin or moderator on first try, -do- pass pin and moderator\n   *             if joining as host on second loop, pass pin and pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    LoggerProxy.logger.log('Meeting:index#join --> Joining a meeting');\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    if (options.meetingQuality) {\n      if (typeof options.meetingQuality === 'string') {\n        if (!QUALITY_LEVELS[options.meetingQuality]) {\n          const errorMessage = `Meeting:index#join --> ${options.meetingQuality} not defined`;\n\n          LoggerProxy.logger.error(errorMessage);\n\n          return Promise.reject(new Error(errorMessage));\n        }\n\n        this.mediaProperties.setLocalQualityLevel(options.meetingQuality);\n        this.mediaProperties.setRemoteQualityLevel(options.meetingQuality);\n      }\n\n      if (typeof options.meetingQuality === 'object') {\n        if (\n          !QUALITY_LEVELS[options.meetingQuality.local] &&\n          !QUALITY_LEVELS[options.meetingQuality.remote]\n        ) {\n          const errorMessage = `Meeting:index#join --> ${\n            options.meetingQuality.local || options.meetingQuality.remote\n          } not defined`;\n\n          LoggerProxy.logger.error(errorMessage);\n\n          return Promise.reject(new Error(errorMessage));\n        }\n\n        if (options.meetingQuality.local) {\n          this.mediaProperties.setLocalQualityLevel(options.meetingQuality.local);\n        }\n        if (options.meetingQuality.remote) {\n          this.mediaProperties.setRemoteQualityLevel(options.meetingQuality.remote);\n        }\n      }\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n      LoggerProxy.logger.log('Meeting:index#join --> Success');\n\n      return join;\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n      LoggerProxy.logger.error('Meeting:index#join --> Failed', error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (\n    mediaDirection,\n    // This return an OBJECT {video: {height, widght}}\n    audioVideo = VIDEO_RESOLUTIONS[this.mediaProperties.localQualityLevel],\n    sharePreferences\n  ) => {\n    if (\n      mediaDirection &&\n      (\n        mediaDirection.sendAudio ||\n        mediaDirection.sendVideo ||\n        mediaDirection.sendShare\n      )\n    ) {\n      return Media.getSupportedDevice({\n        sendAudio: mediaDirection.sendAudio,\n        sendVideo: mediaDirection.sendVideo\n      })\n        .catch((error) => Promise.reject(\n          new MediaError('Given constraints do not match permission set for either camera or microphone', error)\n        ))\n        .then((devicePermissions) =>\n          Media.getUserMedia(\n            {\n              ...mediaDirection,\n              sendAudio: (mediaDirection.sendAudio === devicePermissions.sendAudio),\n              sendVideo: (mediaDirection.sendVideo === devicePermissions.sendVideo),\n              isSharing: this.isSharing\n            },\n            audioVideo,\n            sharePreferences,\n            this.config\n          )\n            .catch((error) => {\n              // Whenever there is a failure when trying to access a user's device\n              // report it as an operational metric\n              // This gives visibility into common errors and can help\n              // with further troubleshooting\n              const metricName = METRICS_OPERATIONAL_MEASURES.GET_USER_MEDIA_FAILURE;\n              const data = {\n                correlation_id: this.correlationId,\n                locus_id: this.locusUrl.split('/').pop(),\n                reason: error.message\n              };\n              const metadata = {\n                type: error.name\n              };\n\n              Metrics.sendOperationalMetric(metricName, data, metadata);\n              throw new MediaError('Unable to retrieve media streams');\n            }));\n    }\n\n    return Promise.reject(\n      new MediaError('At least one of the mediaDirection value should be true')\n    );\n  };\n\n\n  /**\n   * Checks if the machine has at least one audio or video device\n   * @param {Object} options\n   * @param {Boolean} options.sendAudio\n   * @param {Boolean} options.sendVideo\n   * @returns {Object}\n   * @memberof Meetings\n   */\n  getSupportedDevices = ({sendAudio = true, sendVideo = true}) => Media.getSupportedDevice({sendAudio, sendVideo});\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#addMedia -->';\n\n    if (MeetingUtil.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    LoggerProxy.logger.info(`${LOG_HEADER} Adding Media.`);\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        if (!this.mediaProperties.peerConnection) {\n          this.mediaProperties.setMediaPeerConnection(MediaUtil.createPeerConnection());\n        }\n        this.setReconnectListener();\n        PeerConnectionManager.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel\n      })\n        .then((peerConnection) => {\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          MeetingUtil.startInternalStats(this);\n          if (this.config.metrics.autoSendMQA) {\n            this.startMediaQualityMetrics();\n          }\n          if (this.config.stats.enableStatsAnalyzer) {\n            this.statsAnalyzer = new StatsAnalyzer(this.config.stats);\n            this.statsAnalyzer.on(EVENT_TRIGGERS.MEDIA_QUALITY, (res) => {\n              // TODO:  might have to send the same event to the developer\n              Metrics.postEvent({event: eventType.MEDIA_QUALITY, meetingId: this.correlationId, data: {intervalData: res}});\n            });\n            this.statsAnalyzer.on(EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS, (res) => {\n              if (res.mediaType === VIDEO) {\n                if (this.config.stats.autoDowngradeEnabled && this.canUpdateMedia()) {\n                  LoggerProxy.logger.log(`${LOG_HEADER} High Packet Loss Detected, Adjusting Local Video Quality`);\n                  if (this.mediaProperties.localQualityLevel === QUALITY_LEVELS.HIGH) {\n                    this.setLocalVideoQuality(QUALITY_LEVELS.MEDIUM);\n                  }\n                  else if (this.mediaProperties.localQualityLevel === QUALITY_LEVELS.MEDIUM) {\n                    this.setLocalVideoQuality(QUALITY_LEVELS.LOW);\n                  }\n                }\n                Trigger.trigger(\n                  this,\n                  {\n                    file: 'meeting/index',\n                    function: 'addMedia'\n                  },\n                  EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,\n                  {\n                    mediaType: res.mediaType,\n                    packetLossRatio: res.packetLossRatio\n                  }\n                );\n              }\n            });\n            // This is the right place to start the stats\n            this.statsAnalyzer.startAnalyzer(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error joining the call on roap initialization, `, err);\n          throw err;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() => logRequest(this.roap\n          .sendRoapMediaRequest({\n            sdp: this.mediaProperties.peerConnection.sdp,\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          }), {\n          header: `${LOG_HEADER} Send Roap Media Request.`,\n          success: `${LOG_HEADER} Successfully send roap media request`,\n          failure: `${LOG_HEADER} Error joining the call on send roap media request, `\n        }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE;\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#updateMedia -->';\n\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel\n      })\n        .then((peerConnection) => {\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error updatedMedia, `, err);\n          throw err;\n        })\n        .then(() =>\n          logRequest(this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            }),\n          {\n            header: `${LOG_HEADER} sendRoapMediaRequest being sent`,\n            success: `${LOG_HEADER} sendRoadMediaRequest successful`,\n            failure: `${LOG_HEADER} Error updateMedia on send roap media request, `\n          }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => {\n        let previousMediaDirection = {};\n\n        if (this.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          };\n        }\n        else {\n          this.mediaProperties.mediaDirection = {};\n        }\n\n        return MeetingUtil.updateTransceiver(\n          {\n            type: 'audio',\n            sendTrack: options.sendAudio,\n            receiveTrack: options.receiveAudio,\n            track,\n            transceiver: audioTransceiver,\n            peerConnection: this.mediaProperties.peerConnection,\n            previousMediaDirection\n          },\n          {\n            mediaProperties: this.mediaProperties,\n            roapSeq: this.roapSeq,\n            meeting: this,\n            id: this.id\n          }\n        );\n      })\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n\n        // audio state could be undefined if you have not sent audio before\n        this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n\n        // video state could be undefined if you have not sent video before\n        this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.setLocalShareTrack(stream);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options leave options\n   * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n    const leaveReason = options.reason || MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n\n    LoggerProxy.logger.log('Meeting:index#leave --> Leaving a meeting');\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              reason: options.reason,\n              meetingId: this.id\n            }\n          );\n        }\n        LoggerProxy.logger.log('Meeting:index#leave --> LEAVE REASON ', leaveReason);\n\n        return leave;\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n        LoggerProxy.logger.error('Meeting:index#leave --> Failed to leave ', error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n\n          return Promise.resolve();\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting:index#share --> Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting:index#stopShare --> Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n            {\n              reason: SHARE_STOPPED_REASON.SELF_STOPPED\n            }\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Sends DTMF tones to the current meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  sendDTMF(tones) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    if (this.locusInfo && this.locusInfo.self) {\n      if (this.locusInfo.self.enableDTMF) {\n        return this.meetingRequest\n          .sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones\n          });\n      }\n\n      return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n    }\n\n    return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n  }\n\n  /**\n   * Sends request to change layout type for the current meeting for the specific participant/device only\n   * @param {String} layoutType a layout type that should be available in meeting constants LAYOUT_TYPES\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  changeVideoLayout(layoutType) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    // TODO: We need a real time value for Audio, Video and Share send indicator\n    if (this.mediaProperties.mediaDirection.receiveVideo === true && this.mediaProperties.remoteStream) {\n      if (LAYOUT_TYPES.includes(layoutType)) {\n        return this.meetingRequest\n          .changeVideoLayout({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            layoutType\n          })\n          .then((response) => {\n            if (response && response.body && response.body.locus) {\n              this.locusInfo.onFullLocus(response.body.locus);\n            }\n          });\n      }\n\n      return reject('Meeting:index#changeVideoLayout --> cannot change video layout, invalid layoutType recieved.');\n    }\n\n    return reject('Meeting:index#changeVideoLayout --> cannot change video layout, you are not recieving any video/share stream');\n  }\n\n  /**\n   * Sets the quality of the local video stream\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setLocalVideoQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setLocalVideoQuality --> Setting quality to ${level}`);\n\n    if (!VIDEO_RESOLUTIONS[level]) {\n      const errorMessage = `Meeting:index#setLocalVideoQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.sendVideo) {\n      const errorMessage = 'Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.localQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setLocalQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setLocalQualityLevel(level);\n\n    const mediaDirection = {\n      sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n      sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n      sendShare: this.mediaProperties.mediaDirection.sendShare\n    };\n\n    return this.getMediaStreams(mediaDirection, VIDEO_RESOLUTIONS[level])\n      .then(([localStream]) =>\n        this.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        }));\n  }\n\n  /**\n   * Sets the quality level of the remote incoming media\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setRemoteQualityLevel(level) {\n    LoggerProxy.logger.log(`Meeting:index#setRemoteQualityLevel --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      const errorMessage = `Meeting:index#setRemoteQualityLevel --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.receiveAudio && !this.mediaProperties.mediaDirection.receiveVideo) {\n      const errorMessage = 'Meeting:index#setRemoteQualityLevel --> unable to change remote quality, receiveVideo and receiveAudio is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.remoteQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setRemoteQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setRemoteQualityLevel(level);\n\n    return this.updateMedia({mediaSettings: this.mediaProperties.mediaDirection});\n  }\n\n  /**\n   * Sets the quality level of all meeting media (incoming/outgoing)\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setMeetingQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setMeetingQuality --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      const errorMessage = `Meeting:index#setMeetingQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    const previousLevel = {\n      local: this.mediaProperties.localQualityLevel,\n      remote: this.mediaProperties.remoteQualityLevel\n    };\n\n    // If level is already the same, don't do anything\n    if (\n      level === this.mediaProperties.localQualityLevel &&\n      level === this.mediaProperties.remoteQualityLevel\n    ) {\n      LoggerProxy.logger.warn(`Meeting:index#setMeetingQuality --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Determine the direction of our current media\n    const {receiveAudio, receiveVideo, sendVideo} = this.mediaProperties.mediaDirection;\n\n    return (sendVideo ? this.setLocalVideoQuality(level) : Promise.resolve())\n      .then(() =>\n        ((receiveAudio || receiveVideo) ?\n          this.setRemoteQualityLevel(level) :\n          Promise.resolve()))\n      .catch((error) => {\n        // From troubleshooting it seems that the stream itself doesn't change the max-fs if the peer connection isn't stable\n        this.mediaProperties.setLocalQualityLevel(previousLevel.local);\n        this.mediaProperties.setRemoteQualityLevel(previousLevel.remote);\n\n        LoggerProxy.logger.error(`Meeting:index#setMeetingQuality --> ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n  * @param {Object} options parameter\n  * @param {Boolean} options.sendAudio send audio from the display share\n  * @param {Boolean} options.sendShare send video from the display share\n  * @param {Object} options.sharePreferences\n  * @param {MediaTrackConstraints} options.sharePreferences.shareConstraints constraints to apply to video\n  *   @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints}\n  * @param {Boolean} options.sharePreferences.highFrameRate if shareConstraints isn't provided, set default values based off of this boolean\n  * @returns {Promise.<MediaStream>}\n  */\n  shareScreen(options = {}) {\n    LoggerProxy.logger.log('Meeting:index#shareScreen --> Getting local share');\n\n    const shareConstraints = {\n      sendShare: true,\n      sendAudio: false,\n      ...options\n    };\n\n    return Media.getDisplayMedia(shareConstraints)\n      .then((shareStream) => {\n        this.updateShare({\n          sendShare: true,\n          receiveShare: this.mediaProperties.mediaDirection.receiveShare,\n          stream: shareStream\n        });\n      })\n      .catch((error) => {\n        // Whenever there is a failure when trying to access a user's display\n        // report it as an operational metric\n        // This gives visibility into common errors and can help\n        // with further troubleshooting\n        const metricName = METRICS_OPERATIONAL_MEASURES.GET_DISPLAY_MEDIA_FAILURE;\n        const data = {\n          correlation_id: this.correlationId,\n          locus_id: this.locusUrl.split('/').pop(),\n          reason: error.message\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n        throw new MediaError('Unable to retrieve display media stream', error);\n      });\n  }\n}\n"]}