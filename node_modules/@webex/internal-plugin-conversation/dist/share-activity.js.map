{"version":3,"sources":["share-activity.js"],"names":["EMITTER_SYMBOL","FILE_SYMBOL","PROMISE_SYMBOL","ShareActivity","WebexPlugin","extend","getSymbols","file","emitter","namespace","derived","target","deps","fn","conversation","session","required","type","content","clientTempId","displayName","enableThumbnails","default","hiddenSpaceUrl","mentions","spaceUrl","uploads","initialize","attrs","options","prototype","resolve","_spaceUrl","_retrieveSpaceUrl","url","then","_hiddenSpaceUrl","addGif","gif","gifToAdd","get","name","fileSize","size","byteLength","length","mimeType","objectType","height","width","image","set","SCR","create","scr","loc","thumbnailScr","add","upload","EventEmitter","promise","logger","thumbnailMaxWidth","config","thumbnailMaxHeight","imageData","main","webex","internal","encryption","encryptBinary","cdata","all","uploadPromise","_upload","metadata","downloadUrl","thumb","thumbnail","fileDimensions","thumbnailDimensions","getFiles","files","key","push","uri","fileHash","toString","qs","transcode","phases","$url","uploadUrl","finalize","$uri","finishUploadUrl","body","remove","delete","prepare","Error","activity","verb","object","undefined","items","promises","forEach","item","contentCategory","_determineContentCategory","_itemContainsActionWithMimeType","map","actions","mimeTypes","split","shift","request","method","res","share","parent"],"mappings":"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","file":"share-activity.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\n\nimport SCR from 'node-scr';\nimport {proxyEvents, transferEvents} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {filter, map, pick, some} from 'lodash';\nimport {detectFileType, processImage} from '@webex/helper-image';\nimport sha256 from 'crypto-js/sha256';\n\nexport const EMITTER_SYMBOL = Symbol('EMITTER_SYMBOL');\nexport const FILE_SYMBOL = Symbol('FILE_SYMBOL');\nconst PROMISE_SYMBOL = Symbol('PROMISE_SYMBOL');\n\n/**\n * @class\n */\nconst ShareActivity = WebexPlugin.extend({\n  getSymbols() {\n    return {\n      file: FILE_SYMBOL,\n      emitter: EMITTER_SYMBOL\n    };\n  },\n\n  namespace: 'Conversation',\n\n  derived: {\n    target: {\n      deps: ['conversation'],\n      fn() {\n        return this.conversation;\n      }\n    }\n  },\n\n  session: {\n    conversation: {\n      required: true,\n      type: 'object'\n    },\n\n    content: 'string',\n\n    clientTempId: 'string',\n\n    displayName: 'string',\n\n    enableThumbnails: {\n      default: true,\n      type: 'boolean'\n    },\n\n    hiddenSpaceUrl: 'object',\n\n    mentions: 'object',\n\n    spaceUrl: 'object',\n\n    uploads: {\n      type: 'object',\n      default() {\n        return new Map();\n      }\n    }\n  },\n\n  initialize(attrs, options) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (attrs && attrs.conversation) {\n      this.spaceUrl = Promise.resolve(attrs.conversation._spaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space`)\n        .then((url) => {\n          attrs.conversation._spaceUrl = url;\n\n          return url;\n        }));\n\n      this.hiddenSpaceUrl = Promise.resolve(attrs.conversation._hiddenSpaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space/hidden`)\n        .then((url) => {\n          attrs.conversation._hiddenSpaceUrl = url;\n\n          return url;\n        }));\n    }\n  },\n\n  /**\n   * Adds an additional GIF to the share activity\n   * Different from regular add to skip uploading to webex files service\n   * @param {File} gif\n   * @param {File} gif.image // thumbnail\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {Promise}\n   */\n  addGif(gif, options) {\n    let gifToAdd = this.uploads.get(gif);\n\n    // If the gif already exists, then don't do anything\n    if (gifToAdd) {\n      return Promise.resolve();\n    }\n\n    gifToAdd = Object.assign({\n      displayName: gif.name,\n      fileSize: gif.size || gif.byteLength || gif.length,\n      mimeType: gif.type,\n      url: 'https://giphy.com',\n      objectType: 'file',\n      height: gif.height,\n      width: gif.width,\n      image: {\n        height: gif.image.height,\n        width: gif.image.width,\n        url: 'https://giphy.com'\n      },\n      [FILE_SYMBOL]: gif\n    }, pick(options, 'actions'));\n\n    this.uploads.set(gif, gifToAdd);\n\n    /* Instead of encryptBinary, which produces a encrypted version of\n     * the file for upload and a SCR (contains info needed to encrypt the\n     * SCR itself and the displayName), we directly create an SCR.\n     * Because we are skipping uploading, the encrypted file is not needed.\n     */\n    return SCR.create()\n      .then((scr) => {\n        scr.loc = gif.url;\n        gifToAdd.scr = scr;\n\n        return SCR.create();\n      })\n      .then((thumbnailScr) => {\n        thumbnailScr.loc = gif.image.url;\n        gifToAdd.image.scr = thumbnailScr;\n      });\n  },\n\n  /**\n   * Adds an additional file to the share and begins submitting it to webex\n   * files\n   * @param {File} file\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {EventEmittingPromise}\n   */\n  add(file, options) {\n    options = options || {};\n    let upload = this.uploads.get(file);\n\n    if (upload) {\n      return upload[PROMISE_SYMBOL];\n    }\n    const emitter = new EventEmitter();\n\n    upload = Object.assign({\n      displayName: file.name,\n      fileSize: file.size || file.byteLength || file.length,\n      mimeType: file.type,\n      objectType: 'file',\n      [EMITTER_SYMBOL]: emitter,\n      [FILE_SYMBOL]: file\n    }, pick(options, 'actions'));\n\n    this.uploads.set(file, upload);\n    const promise = detectFileType(file, this.logger)\n      .then((type) => {\n        upload.mimeType = type;\n\n        return processImage({\n          file,\n          type,\n          thumbnailMaxWidth: this.config.thumbnailMaxWidth,\n          thumbnailMaxHeight: this.config.thumbnailMaxHeight,\n          enableThumbnails: this.enableThumbnails,\n          logger: this.logger\n        });\n      })\n      .then((imageData) => {\n        const main = this.webex.internal.encryption.encryptBinary(file)\n          .then(({scr, cdata}) => {\n            upload.scr = scr;\n\n            return Promise.all([cdata, this.spaceUrl]);\n          })\n          .then(([cdata, spaceUrl]) => {\n            const uploadPromise = this._upload(cdata, `${spaceUrl}/upload_sessions`);\n\n            transferEvents('progress', uploadPromise, emitter);\n\n            return uploadPromise;\n          })\n          .then((metadata) => {\n            upload.url = upload.scr.loc = metadata.downloadUrl;\n          });\n\n\n        let thumb;\n\n        if (imageData) {\n          const [thumbnail, fileDimensions, thumbnailDimensions] = imageData;\n\n          Object.assign(upload, fileDimensions);\n\n          if (thumbnail && thumbnailDimensions) {\n            upload.image = thumbnailDimensions;\n            thumb = this.webex.internal.encryption.encryptBinary(thumbnail)\n              .then(({scr, cdata}) => {\n                upload.image.scr = scr;\n\n                return Promise.all([cdata, this.hiddenSpaceUrl]);\n              })\n              .then(([cdata, spaceUrl]) => this._upload(cdata, `${spaceUrl}/upload_sessions`))\n              .then((metadata) => {\n                upload.image.url = upload.image.scr.loc = metadata.downloadUrl;\n              });\n          }\n        }\n\n        return Promise.all([main, thumb]);\n      });\n\n\n    upload[PROMISE_SYMBOL] = promise;\n\n    proxyEvents(emitter, promise);\n\n    return promise;\n  },\n\n  /**\n   * Fetches the files from the share\n   * @returns {Array}\n   */\n  getFiles() {\n    const files = [];\n\n    for (const [key] of this.uploads) {\n      files.push(this.uploads.get(key)[FILE_SYMBOL]);\n    }\n\n    return files;\n  },\n\n\n  /**\n   * @param {File} file\n   * @param {string} uri\n   * @private\n   * @returns {Promise}\n   */\n  _upload(file, uri) {\n    const fileSize = file.length || file.size || file.byteLength;\n    const fileHash = sha256(file).toString();\n\n    return this.webex.upload({\n      uri,\n      file,\n      qs: {\n        transcode: true\n      },\n      phases: {\n        initialize: {fileSize},\n        upload: {\n          $url(session) {\n            return session.uploadUrl;\n          }\n        },\n        finalize: {\n          $uri(session) {\n            return session.finishUploadUrl;\n          },\n          body: {fileSize, fileHash}\n        }\n      }\n    });\n  },\n\n  /**\n   * Removes the specified file from the share (Does not currently delete the\n   * uploaded file)\n   * @param {File} file\n   * @returns {Promise}\n   */\n  remove(file) {\n    this.uploads.delete(file);\n\n    // Returns a promise for future-proofiness.\n    return Promise.resolve();\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  prepare() {\n    if (!this.uploads.size) {\n      throw new Error('Cannot submit a share activity without atleast one file');\n    }\n\n    const activity = {\n      verb: 'share',\n      object: {\n        objectType: 'content',\n        displayName: this.object && this.object.displayName ? this.object.displayName : undefined,\n        content: this.object && this.object.content ? this.object.content : undefined,\n        mentions: this.object && this.object.mentions ? this.object.mentions : undefined,\n        files: {\n          items: []\n        }\n      },\n      clientTempId: this.clientTempId\n    };\n\n    const promises = [];\n\n    this.uploads.forEach((item) => {\n      activity.object.files.items.push(item);\n      promises.push(item[PROMISE_SYMBOL]);\n    });\n\n    activity.object.contentCategory = this._determineContentCategory(activity.object.files.items);\n\n    return Promise.all(promises)\n      .then(() => activity);\n  },\n\n  /**\n   * @param {Array} items\n   * @param {string} mimeType\n   * @private\n   * @returns {boolean}\n   */\n  _itemContainsActionWithMimeType(items, mimeType) {\n    return some(items.map((item) => some(item.actions, {mimeType})));\n  },\n\n  /**\n   * @param {Array} items\n   * @private\n   * @returns {string}\n   */\n  _determineContentCategory(items) {\n    // determine if the items contain an image\n    if (this._itemContainsActionWithMimeType(items, 'application/x-cisco-webex-whiteboard')) {\n      return 'documents';\n    }\n\n    const mimeTypes = filter(map(items, 'mimeType'));\n\n    if (mimeTypes.length !== items.length) {\n      return 'documents';\n    }\n\n    const contentCategory = mimeTypes[0].split('/').shift();\n\n    if (contentCategory !== 'video' && contentCategory !== 'image') {\n      return 'documents';\n    }\n\n    for (const mimeType of mimeTypes) {\n      if (mimeType.split('/').shift() !== contentCategory) {\n        return 'documents';\n      }\n    }\n\n    return `${contentCategory}s`;\n  },\n\n  /**\n   * @param {string} uri\n   * @returns {Promise}\n   */\n  _retrieveSpaceUrl(uri) {\n    return this.webex.request({\n      method: 'PUT',\n      uri\n    })\n      .then((res) => res.body.spaceUrl);\n  }\n});\n\n/**\n * Instantiates a ShareActivity\n * @param {Object} conversation\n * @param {ShareActivity|Object|array} object\n * @param {ProxyWebex} webex\n * @returns {ShareActivity}\n */\nShareActivity.create = function create(conversation, object, webex) {\n  if (object instanceof ShareActivity) {\n    return object;\n  }\n\n  let files;\n\n  if (object && object.object && object.object.files) {\n    files = object.object.files;\n    Reflect.deleteProperty(object.object, 'files');\n  }\n\n  const share = new ShareActivity(Object.assign({\n    conversation\n  }, object), {\n    parent: webex\n  });\n\n  files = files && files.items || files;\n  if (files) {\n    files.forEach((file) => share.add(file));\n  }\n\n  return share;\n};\n\nexport default ShareActivity;\n"]}