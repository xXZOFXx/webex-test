{"version":3,"sources":["conversation.js"],"names":["CLUSTER_SERVICE","process","env","WEBEX_CONVERSATION_CLUSTER_SERVICE","DEFAULT_CLUSTER_SERVICE","DEFAULT_CLUSTER_IDENTIFIER","WEBEX_CONVERSATION_DEFAULT_CLUSTER","DEFAULT_CLUSTER","idToUrl","getConvoLimit","options","limit","conversationsLimit","value","name","Conversation","WebexPlugin","extend","namespace","getUrlFromClusterId","cluster","id","clusterId","split","length","webex","internal","services","getServiceFromClusterId","url","Error","acknowledge","conversation","object","activity","getConvoUrl","convoWithUrl","reject","prepare","verb","target","prepareConversation","objectType","then","a","submit","add","participant","user","asUUID","create","kmsMessage","method","uri","resourceUri","userIds","params","participants","all","map","catch","err","allowPartialCreation","undefined","unshift","device","userId","validParticipants","filter","forceGrouped","InvalidUserCreation","skipOneOnOneFetch","_createOneOnOne","_maybeCreateOneOnOneThenPost","_createGrouped","c","set","files","share","activities","items","push","createReactionHmac","displayName","parent","encryption","unboundedStorage","get","encryptionKeyUrl","keyString","key","JSON","parse","formatjwk","k","jwk","kid","kty","source","hmac","hex","stringify","resolve","sendReaction","reactionPayload","act","deleteReaction","reactionId","deleteReactionPayload","actor","addReaction","addReactionPayload","type","delete","download","item","isEncrypted","Boolean","scr","shunt","EventEmitter","promise","loc","_downloadUnencryptedFile","on","args","emit","res","shouldNotAddExifData","file","logger","info","mimeType","responseType","request","body","expand","bulkActivitiesFetch","activityUrls","resource","api","activitiesArr","multistatus","forEach","statusData","status","data","qs","uuidEntryFormat","personRefresh","activitiesLimit","includeConvWithDeletedUserUUID","includeParticipants","service","_recordUUIDs","leave","querystring","authId","list","_list","deferDecrypt","results","convo","paginate","page","links","next","Page","queryOptions","participantsLimit","reqOptions","response","additionalUrls","listLeft","listActivities","_listActivities","listMentions","muteMentions","tag","tags","muteMessages","cardAction","inputs","parentActivity","post","message","clientTempId","uuid","v4","parentActivityId","activityType","pop","content","processActivityEvent","event","transform","removeAllMuteTags","untag","makeShare","ShareActivity","assign","avatar","size","enableThumbnails","conversations","generalConversationUuid","generalConvo","find","warn","relatedUrl","updateTypingStatus","eventType","typing","conversationId","endpoint","transcode","async","customActivityCopy","constructor","copySrc","toJWE","toJSON","cloneActivity","trigger","error","errorCode","KEY_ROTATION_REQUIRED","defaultActivityEncryptionKeyUrl","KEY_ALREADY_ROTATED","ENCRYPTION_KEY_URL_MISMATCH","defaultActivityEncryptionkeyUrl","unassign","unmuteMentions","unmuteMessages","update","updateKey","_updateKey","kms","createUnboundKeys","count","keys","kmsResourceObjectUrl","startsWith","keyUris","_create","payload","forceCreate","_prepareConversationForCreation","getConversationUrl","convoUrl","waitForCatalog","_inferConversationUrl","feature","getFeature","haMessagingEnabled","NODE_ENV","conversationUrl","slice","published","reverse","Math","floor","host","newOptions","result","concat","comment","html","reason","statusCode","recordUUID","prototype","submitSimpleActivity","submitModerationChangeActivity","moderator","fnName","submitSpacePropertyActivity","submitObjectActivity"],"mappings":"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","file":"conversation.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport {EventEmitter} from 'events';\n\nimport hmacSHA256 from 'crypto-js/hmac-sha256';\nimport hex from 'crypto-js/enc-hex';\nimport {proxyEvents, tap} from '@webex/common';\nimport {Page, WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, cloneDeepWith, defaults, isArray, isObject, isString, last, map, merge, omit, pick, uniq} from 'lodash';\nimport {readExifData} from '@webex/helper-image';\nimport uuid from 'uuid';\n\nimport {InvalidUserCreation} from './convo-error';\nimport ShareActivity from './share-activity';\nimport {\n  DEFAULT_CLUSTER,\n  DEFAULT_CLUSTER_SERVICE,\n  ENCRYPTION_KEY_URL_MISMATCH,\n  KEY_ALREADY_ROTATED,\n  KEY_ROTATION_REQUIRED\n} from './constants';\n\n\nconst CLUSTER_SERVICE = process.env.WEBEX_CONVERSATION_CLUSTER_SERVICE || DEFAULT_CLUSTER_SERVICE;\nconst DEFAULT_CLUSTER_IDENTIFIER =\n  process.env.WEBEX_CONVERSATION_DEFAULT_CLUSTER ||\n  `${DEFAULT_CLUSTER}:${CLUSTER_SERVICE}`;\n\nconst idToUrl = new Map();\n\nconst getConvoLimit = (options = {}) => {\n  let limit;\n\n  if (options.conversationsLimit) {\n    limit = {\n      value: options.conversationsLimit,\n      name: 'conversationsLimit'\n    };\n  }\n\n  return limit;\n};\n\nconst Conversation = WebexPlugin.extend({\n  namespace: 'Conversation',\n\n  /**\n   * @param {String} cluster the cluster containing the id\n   * @param {UUID} [id] the id of the conversation.\n   *  If empty, just return the base URL.\n   * @returns {String} url of the conversation\n   */\n  getUrlFromClusterId({cluster = 'us', id} = {}) {\n    let clusterId =\n      cluster === 'us' ? DEFAULT_CLUSTER_IDENTIFIER : cluster;\n\n    // Determine if cluster has service name (non-US clusters from hydra do not)\n    if (clusterId.split(':').length < 4) {\n      // Add Service to cluster identifier\n      clusterId = `${cluster}:${CLUSTER_SERVICE}`;\n    }\n\n    const {url} = this.webex.internal.services\n      .getServiceFromClusterId({clusterId}) || {};\n\n    if (!url) {\n      throw Error(`Could not find service for cluster [${cluster}]`);\n    }\n\n    return id ? `${url}/conversations/${id}` : url;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  acknowledge(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'acknowledge',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'activity',\n        id: object.id,\n        url: object.url\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Adds a participant to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  add(conversation, participant, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    return this.webex.internal.user.asUUID(participant, {create: true})\n      .then((id) => this.prepare(activity, {\n        verb: 'add',\n        target: this.prepareConversation(convoWithUrl),\n        object: {\n          id,\n          objectType: 'person'\n        },\n        kmsMessage: {\n          method: 'create',\n          uri: '/authorizations',\n          resourceUri: '<KRO>',\n          userIds: [\n            id\n          ]\n        }\n      })\n        .then((a) => this.submit(a)));\n  },\n\n  /**\n   * Creates a conversation\n   * @param {Object} params\n   * @param {Array<Participant>} params.participants\n   * @param {Array<File>} params.files\n   * @param {string} params.comment\n   * @param {string} params.html\n   * @param {Object} params.displayName\n   * @param {Object} options\n   * @param {Boolean} options.allowPartialCreation\n   * @param {Boolean} options.forceGrouped\n   * @param {Boolean} options.skipOneOnOneFetch skips checking 1:1 exists before creating conversation\n   * @returns {Promise<Conversation>}\n   */\n  create(params, options = {}) {\n    if (!params.participants || params.participants.length === 0) {\n      return Promise.reject(new Error('`params.participants` is required'));\n    }\n\n    return Promise.all(params.participants.map((participant) => this.webex.internal.user.asUUID(participant, {create: true})\n      // eslint-disable-next-line arrow-body-style\n      .catch((err) => {\n        return options.allowPartialCreation ? undefined : Promise.reject(err);\n      })))\n      .then((participants) => {\n        participants.unshift(this.webex.internal.device.userId);\n        participants = uniq(participants);\n\n        const validParticipants = participants.filter((participant) => participant);\n\n        params.participants = validParticipants;\n\n        // check if original participants list was to create a 1:1\n        if (participants.length === 2 && !(options && options.forceGrouped)) {\n          if (!params.participants[1]) {\n            return Promise.reject(new InvalidUserCreation());\n          }\n\n          if (options.skipOneOnOneFetch) {\n            return this._createOneOnOne(params);\n          }\n\n          return this._maybeCreateOneOnOneThenPost(params, options);\n        }\n\n        return this._createGrouped(params, options);\n      })\n      .then((c) => {\n        idToUrl.set(c.id, c.url);\n\n        if (!params.files) {\n          return c;\n        }\n\n        return this.webex.internal.conversation.share(c, params.files)\n          .then((a) => {\n            c.activities.items.push(a);\n\n            return c;\n          });\n      });\n  },\n\n  /**\n   * @private\n   * generate a deterministic HMAC for a reaction\n   * @param {Object} displayName displayName of reaction we are sending\n   * @param {Object} parent parent activity of reaction\n   * @returns {Promise<HMAC>}\n   */\n  createReactionHmac(displayName, parent) {\n    // not using webex.internal.encryption.getKey() because the JWK it returns does not have a 'k'\n    // property. we need jwk.k to correctly generate the HMAC\n\n    return this.webex.internal.encryption.unboundedStorage.get(parent.encryptionKeyUrl)\n      .then((keyString) => {\n        const key = JSON.parse(keyString);\n        // when we stringify this object, keys must be in this order to generate same HMAC as\n        // desktop clients\n        const formatjwk = {k: key.jwk.k, kid: key.jwk.kid, kty: key.jwk.kty};\n\n        const source = `${JSON.stringify(formatjwk)}${parent.id}${displayName}`;\n\n        const hmac = hex.stringify(hmacSHA256(source, parent.id));\n\n        return Promise.resolve(hmac);\n      });\n  },\n\n  /**\n   * @typedef {Object} ReactionPayload\n   * @property {Object} actor\n   * @property {string} actor.objectType\n   * @property {string} actor.id\n   * @property {string} objectType\n   * @property {string} verb will be either add' or 'delete'\n   * @property {Object} target\n   * @property {string} target.id\n   * @property {string} target.objectType\n   * @property {Object} object this will change on delete vs. add\n   * @property {string} object.id present in delete case\n   * @property {string} object.objectType 'activity' in delete case, 'reaction2' in add case\n   * @property {string} object.displayName must be 'celebrate', 'heart', 'thumbsup', 'smiley', 'haha', 'confused', 'sad'\n   * @property {string} object.hmac\n   */\n\n  /**\n   * @private\n   * send add or delete reaction to convo service\n   * @param {Object} conversation\n   * The payload to send a reaction\n   * @param {ReactionPayload} reactionPayload\n   * @returns {Promise<Activity>}\n   */\n  sendReaction(conversation, reactionPayload) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(reactionPayload)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(reactionPayload, {\n      target: this.prepareConversation(convoWithUrl),\n      object: pick(reactionPayload, 'id', 'url', 'objectType')\n    })\n      .then((act) => this.submit(act));\n  },\n\n  /**\n   * delete a reaction\n   * @param {Object} conversation\n   * @param {Object} reactionId\n   * @returns {Promise<Activity>}\n   */\n  deleteReaction(conversation, reactionId) {\n    const deleteReactionPayload = {\n      actor: {objectType: 'person', id: this.webex.internal.device.userId},\n      object: {\n        id: reactionId,\n        objectType: 'activity'\n      },\n      objectType: 'activity',\n      target: {\n        id: conversation.id,\n        objectType: 'conversation'\n      },\n      verb: 'delete'\n    };\n\n    return this.sendReaction(conversation, deleteReactionPayload);\n  },\n\n  /**\n   * create a reaction\n   * @param {Object} conversation\n   * @param {Object} displayName must be 'celebrate', 'heart', 'thumbsup', 'smiley', 'haha', 'confused', 'sad'\n   * @param {Object} activity activity object from convo we are reacting to\n   * @returns {Promise<Activity>}\n   */\n  addReaction(conversation, displayName, activity) {\n    return this.createReactionHmac(displayName, activity).then((hmac) => {\n      const addReactionPayload = {\n        actor: {objectType: 'person', id: this.webex.internal.device.userId},\n        target: {\n          id: conversation.id,\n          objectType: 'conversation'\n        },\n        verb: 'add',\n        objectType: 'activity',\n        parent: {\n          type: 'reaction',\n          id: activity.id\n        },\n        object: {\n          objectType: 'reaction2',\n          displayName,\n          hmac\n        }\n      };\n\n      return this.sendReaction(conversation, addReactionPayload);\n    });\n  },\n\n\n  /**\n   * delete content\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  delete(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'delete',\n      target: this.prepareConversation(convoWithUrl),\n      object: pick(object, 'id', 'url', 'objectType')\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Downloads the file specified in item.scr or item.url\n   * @param {Object} item\n   * @param {Object} item.scr\n   * @param {string} item.url\n   * @param {Object} options\n   * @param {Object} options.headers\n   * @param {boolean} options.shouldNotAddExifData\n   * @returns {Promise<File>}\n   */\n  download(item, options = {}) {\n    const isEncrypted = Boolean(item.scr && item.scr.key);\n    const shunt = new EventEmitter();\n    let promise;\n\n    if (isEncrypted) {\n      promise = this.webex.internal.encryption.download(item.scr, item.options);\n    }\n    else if (item.scr && item.scr.loc) {\n      promise = this._downloadUnencryptedFile(item.scr.loc, options);\n    }\n    else {\n      promise = this._downloadUnencryptedFile(item.url, options);\n    }\n\n    promise = promise\n      .on('progress', (...args) => shunt.emit('progress', ...args))\n      .then((res) => {\n        if (options.shouldNotAddExifData) {\n          return res;\n        }\n\n        return readExifData(item, res);\n      })\n      .then((file) => {\n        this.logger.info('conversation: file downloaded');\n\n        if (item.displayName && !file.name) {\n          file.name = item.displayName;\n        }\n\n        if (!file.type && item.mimeType) {\n          file.type = item.mimeType;\n        }\n\n        return file;\n      });\n\n    proxyEvents(shunt, promise);\n\n    return promise;\n  },\n\n  /**\n   * Downloads an unencrypted file\n   * @param {string} uri\n   * @param {Object} options\n   * @param {Ojbect} options.headers\n   * @returns {Promise<File>}\n   */\n  _downloadUnencryptedFile(uri, options = {}) {\n    Object.assign(options, {\n      uri,\n      responseType: 'buffer'\n    });\n\n    const promise = this.request(options)\n      .then((res) => res.body);\n\n    proxyEvents(options.download, promise);\n\n    return promise;\n  },\n\n  /**\n   * Helper method that expands a set of parameters into an activty object\n   * @param {string} verb\n   * @param {Object} object\n   * @param {Object} target\n   * @param {Object|string} actor\n   * @returns {Object}\n   */\n  expand(verb, object, target, actor) {\n    const activity = {\n      actor,\n      objectType: 'activity',\n      verb\n    };\n\n    if (!actor) {\n      actor = this.webex.internal.device.userId;\n    }\n\n    if (isString(actor)) {\n      activity.actor = {\n        objectType: 'person',\n        id: actor\n      };\n    }\n\n    if (object) {\n      activity.object = object;\n    }\n\n    if (target) {\n      activity.target = target;\n    }\n\n    return activity;\n  },\n\n  /**\n  * Gets an array of activities with an array of activity URLS\n  * @param {Array} activityUrls\n  * @param {Object} options\n  * @param {String} options.cluster cluster where the activities are located\n  * @param {String} options.url base convo url where the activities are located\n  * @returns {Promise<Object>} Resolves with the activities\n  */\n  bulkActivitiesFetch(activityUrls, options = {}) {\n    let cluster, url;\n\n    if (typeof options === 'string') {\n      cluster = options;\n    }\n    else {\n      ({cluster, url} = options);\n    }\n\n    const resource = 'bulk_activities_fetch';\n    const params = {\n      method: 'POST',\n      body: {\n        activityUrls\n      }\n    };\n\n    if (url) {\n      const uri = `${url}/${resource}`;\n\n      Object.assign(params, {\n        uri\n      });\n    }\n    else if (cluster) {\n      const uri = `${this.getUrlFromClusterId({cluster})}/${resource}`;\n\n      Object.assign(params, {\n        uri\n      });\n    }\n    else {\n      Object.assign(params, {\n        api: 'conversation',\n        resource\n      });\n    }\n\n    return this.webex.request(params)\n      .then((res) => {\n        const activitiesArr = [];\n\n        if (res.body.multistatus) {\n          res.body.multistatus.forEach((statusData) => {\n            if (statusData.status === '200' && statusData.data && statusData.data.activity) {\n              activitiesArr.push(statusData.data.activity);\n            }\n          });\n        }\n\n        return activitiesArr;\n      });\n  },\n\n  /**\n   * Fetches a single conversation\n   * @param {Object} conversation\n   * @param {String} [conversation.url] The URL where the conversation is located.\n   * @param {String|UUID} [conversation.user] The user to look up in the conversation service\n   *   If specified, the user lookup will take precedence over the url lookup\n   * @param {Object} options\n   * @returns {Promise<Conversation>}\n   */\n  get(conversation, options = {}) {\n    const {user} = conversation;\n    let uri;\n\n    try {\n      uri = !user ? this.getConvoUrl(conversation) : '';\n    }\n    catch (err) {\n      return Promise.reject(Error(err));\n    }\n\n    const params = {\n      qs: Object.assign({\n        uuidEntryFormat: true,\n        personRefresh: true,\n        activitiesLimit: 0,\n        includeConvWithDeletedUserUUID: false,\n        includeParticipants: false\n      }, omit(options, 'id', 'user', 'url'))\n    };\n\n    // Default behavior is to set includeParticipants=false,\n    // which makes the payload lighter by removing participant info.\n    // If the caller explicitly sets the participantAckFilter or\n    // participantsLimit, we don't want that default setting.\n    if (('participantAckFilter' in options) || ('participantsLimit' in options)) {\n      delete params.qs.includeParticipants;\n    }\n\n    return Promise.resolve(user ? this.webex.internal.user.asUUID(user) : null)\n      .then((userId) => {\n        if (userId) {\n          Object.assign(params, {\n            service: 'conversation',\n            resource: `conversations/user/${userId}`\n          });\n        }\n        else {\n          params.uri = uri;\n        }\n\n        return this.request(params);\n      })\n      .then(tap(({body}) => {\n        const {id, url} = body;\n\n        this._recordUUIDs(body);\n        idToUrl.set(id, url);\n      }))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Leaves the conversation or removes the specified user from the specified\n   * conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant If not specified, defaults to current\n   * user\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  leave(conversation, participant, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        if (!participant) {\n          participant = this.webex.internal.device.userId;\n        }\n\n        return this.webex.internal.user.asUUID(participant)\n          .then((id) => this.prepare(activity, {\n            verb: 'leave',\n            target: this.prepareConversation(convoWithUrl),\n            object: {\n              id,\n              objectType: 'person'\n            },\n            kmsMessage: {\n              method: 'delete',\n              uri: `<KRO>/authorizations?${querystring.stringify({authId: id})}`\n            }\n          }));\n      })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Lists a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @returns {Promise<Array<Conversation>>}\n   */\n  list(options = {}) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations',\n      qs: omit(options, 'deferDecrypt'),\n      deferDecrypt: options.deferDecrypt,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * Paginates through a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @param {Page} options.page - After the first result has been returned to a consumer,\n   * you can pass the Page back to the sdk to get the next list of results.\n   * @returns {Promise<Array<Conversation>>}\n   */\n  async paginate(options = {}) {\n    if (options.page) {\n      // We were passed a page but we are out of results\n      if (!options.page.links || !options.page.links.next) {\n        throw new Error('No link to follow for the provided page');\n      }\n\n      // Go get the next page of results\n      return this.request({\n        url: options.page.links.next\n      }).then((res) => ({page: new Page(res, this.webex)}));\n    }\n\n    // No page - so this is the first request to kick off the pagination process\n    const queryOptions = Object.assign({\n      personRefresh: true,\n      uuidEntryFormat: true,\n      activitiesLimit: 0,\n      participantsLimit: 0,\n      paginate: true\n    }, omit(options, ['deferDecrypt', 'url']));\n\n    const reqOptions = {\n      qs: queryOptions,\n      deferDecrypt: options.deferDecrypt,\n      limit: getConvoLimit(options)\n    };\n\n    // if options.url is present we likely received one or more additional urls due to federation. In this case\n    // we need to initialize pagination against that url instead of the default home cluster\n    if (options.url) {\n      reqOptions.uri = `${options.url}/conversations`;\n    }\n    else {\n      reqOptions.service = 'conversation';\n      reqOptions.resource = 'conversations';\n    }\n\n\n    return this.request(reqOptions).then((res) => {\n      const response = {\n        page: new Page(res, this.webex)\n      };\n\n\n      if (res.body && res.body.additionalUrls) {\n        response.additionalUrls = res.body.additionalUrls;\n      }\n\n      return response;\n    });\n  },\n\n  /**\n   * Lists the conversations the current user has left. By default does not\n   * fetch activities or participants\n   * @param {Object} options\n   * @returns {Promise<Array<Conversation>>}\n   */\n  listLeft(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations/left',\n      qs: options,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * List activities for the specified conversation\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @returns {Promise<Array<Activity>>}\n   */\n  listActivities(options) {\n    return this._listActivities(Object.assign(options, {resource: 'activities'}));\n  },\n\n  /**\n   * Lists activities in which the current user was mentioned\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listMentions(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'mentions',\n      qs: omit(options, 'mentions')\n    });\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} inputs\n   * @param {Object} parentActivity\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  cardAction(conversation, inputs, parentActivity, activity = {}) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    activity.parent = {\n      id: parentActivity.id,\n      type: 'cardAction'\n    };\n\n    return this.prepare(activity, {\n      verb: 'cardAction',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'submit'}, inputs)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Posts a message to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} message if string, treated as plaintext; if object,\n   * assumed to be object property of `post` activity\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  post(conversation, message, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (isString(message)) {\n      message = {\n        displayName: message\n      };\n    }\n\n    return this.prepare(activity, {\n      verb: 'post',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'comment'}, message)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  prepareConversation(conversation) {\n    return defaults(pick(conversation, 'id', 'url', 'objectType', 'defaultActivityEncryptionKeyUrl', 'kmsResourceObjectUrl'), {\n      objectType: 'conversation'\n    });\n  },\n\n  prepare(activity, params) {\n    params = params || {};\n    activity = activity || {};\n\n    return Promise.resolve(activity.prepare ? activity.prepare(params) : activity)\n      .then((act) => {\n        defaults(act, {\n          verb: params.verb,\n          kmsMessage: params.kmsMessage,\n          objectType: 'activity',\n          clientTempId: uuid.v4(),\n          actor: this.webex.internal.device.userId\n        });\n\n        // Workaround because parent is a reserved props in Ampersand\n        if ((activity.parentActivityId && activity.activityType) || (activity.parent && activity.parent.id && activity.parent.type)) {\n          act.parent = {\n            id: activity.parentActivityId || activity.parent.id,\n            type: activity.activityType || activity.parent.type\n          };\n        }\n\n        if (isString(act.actor)) {\n          act.actor = {\n            objectType: 'person',\n            id: act.actor\n          };\n        }\n\n        ['actor', 'object'].forEach((key) => {\n          if (params[key]) {\n            act[key] = act[key] || {};\n            defaults(act[key], params[key]);\n          }\n        });\n\n        if (params.target) {\n          merge(act, {\n            target: pick(params.target, 'id', 'url', 'objectType', 'kmsResourceObjectUrl', 'defaultActivityEncryptionKeyUrl')\n          });\n        }\n\n        ['object', 'target'].forEach((key) => {\n          if (act[key] && act[key].url && !act[key].id) {\n            act[key].id = act[key].url.split('/').pop();\n          }\n        });\n\n        ['actor', 'object', 'target'].forEach((key) => {\n          if (act[key] && !act[key].objectType) {\n            // Reminder: throwing here because it's the only way to get out of\n            // this loop in event of an error.\n            throw new Error(`\\`act.${key}.objectType\\` must be defined`);\n          }\n        });\n\n        if (act.object && act.object.content && !act.object.displayName) {\n          return Promise.reject(new Error('Cannot submit activity object with `content` but no `displayName`'));\n        }\n\n        return act;\n      });\n  },\n\n  /**\n   * Handles incoming conversation.activity mercury messages\n   * @param {Event} event\n   * @returns {Promise}\n   */\n  processActivityEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Removes all mute-related tags\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  removeAllMuteTags(conversation, activity) {\n    return this.untag(conversation, {\n      tags: [\n        'MENTION_NOTIFICATIONS_OFF',\n        'MENTION_NOTIFICATIONS_ON',\n        'MESSAGE_NOTIFICATIONS_OFF',\n        'MESSAGE_NOTIFICATIONS_ON'\n      ]\n    }, activity);\n  },\n\n  /**\n   * Creates a ShareActivty for the specified conversation\n   * @param {Object} conversation\n   * @param {Object} activity\n   * @returns {ShareActivty}\n   */\n  makeShare(conversation, activity) {\n    // if we pass activity as null then it does not take care of the\n    // clientTempId created by the web-client while making the provisional\n    // activity, hence we need to pass the activity which was created by the\n    // web-client. This fixes the issue where the image activities do not come\n    // back properly oriented from the server since the clientTempId is missing\n    return ShareActivity.create(conversation, activity, this.webex);\n  },\n\n  /**\n   * Assigns an avatar to a room\n   * @param {Object} conversation\n   * @param {File} avatar\n   * @returns {Promise<Activity>}\n   */\n  assign(conversation, avatar) {\n    if ((avatar.size || avatar.length) > 1024 * 1024) {\n      return Promise.reject(new Error('Room avatars must be less than 1MB'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        const activity = ShareActivity.create(conversation, null, this.webex);\n\n        activity.enableThumbnails = false;\n        activity.add(avatar);\n\n        return this.prepare(activity, {\n          target: this.prepareConversation(convoWithUrl)\n        });\n      })\n      .then((a) => {\n        // yes, this seems a little hacky; will likely be resolved as a result\n        // of #213\n        a.verb = 'assign';\n\n        return this.submit(a);\n      });\n  },\n\n  /**\n   * Get url from convo object. If there isn't one, get it from the cache\n   *\n   * @param {String} url The location of the conversation\n   * @param {UUID} id If there is no url, fall back to id to lookup in cache or with cluster\n   * @param {String} cluster Used with id to lookup url\n   * @param {UUID} generalConversationUuid If this is a team, the id of the general conversation\n   * @param {Object} conversations If this is a team, the list of conversations in the team\n   * @returns {String} url for the specific convo\n   */\n  getConvoUrl({\n    id, url, cluster, conversations, generalConversationUuid\n  }) {\n    if (generalConversationUuid) {\n      // This is a Team\n      // Because Convo doesn't have an endpoint for the team URL\n      // we have to use the general convo URL.\n      const generalConvo = conversations.items.find(\n        (convo) => convo.id === generalConversationUuid\n      );\n\n      return generalConvo.url;\n    }\n\n    if (url) {\n      return url;\n    }\n\n    if (id) {\n      if (cluster) {\n        return this.getUrlFromClusterId({cluster, id});\n      }\n      this.logger.warn(\n        'You should be using the `url` instead of the `id` property'\n      );\n      const relatedUrl = idToUrl.get(id);\n\n      if (!relatedUrl) {\n        throw Error('Could not find the `url` from the given `id`');\n      }\n\n      return relatedUrl;\n    }\n\n    throw Error('The space needs a `url` property');\n  },\n\n  /**\n   * Sets the typing status of the current user in a conversation\n   *\n   * @param {Object} conversation\n   * @param {Object} options\n   * @param {boolean} options.typing\n   * @returns {Promise}\n   */\n  updateTypingStatus(conversation, options) {\n    if (!conversation.id) {\n      if (conversation.url) {\n        conversation.id = conversation.url.split('/').pop();\n      }\n      else {\n        return Promise.reject(\n          new Error('conversation: could not identify conversation')\n        );\n      }\n    }\n\n    let eventType;\n\n    if (options.typing) {\n      eventType = 'status.start_typing';\n    }\n    else {\n      eventType = 'status.stop_typing';\n    }\n\n    const url = this.getConvoUrl(conversation);\n    const resource = 'status/typing';\n    const params = {\n      method: 'POST',\n      body: {\n        conversationId: conversation.id,\n        eventType\n      },\n      url: `${url}/${resource}`\n    };\n\n    return this.request(params);\n  },\n\n  /**\n   * Shares files to the specified conversation\n   * @param {Object} conversation\n   * @param {ShareActivity|Array<File>} activity\n   * @returns {Promise<Activity>}\n   */\n  share(conversation, activity) {\n    if (isArray(activity)) {\n      activity = {\n        object: {\n          files: activity\n        }\n      };\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (!(activity instanceof ShareActivity)) {\n      activity = ShareActivity.create(convoWithUrl, activity, this.webex);\n    }\n\n    return this.prepare(activity, {\n      target: this.prepareConversation(convoWithUrl)\n    })\n      .then((a) => this.submit(a));\n  },\n\n\n  /**\n   * Submits an activity to the conversation service\n   * @param {Object} activity\n   * @param {String} [endpoint] endpoint to submit activity. If empty, find in activity\n   * @returns {Promise<Activity>}\n   */\n  submit(activity, endpoint) {\n    const url = endpoint || this.getConvoUrl(activity.target);\n    const resource = activity.verb === 'share' ? 'content' : 'activities';\n    const params = {\n      method: 'POST',\n      body: activity,\n      qs: {\n        personRefresh: true\n      },\n      url: `${url}/${resource}`\n    };\n\n    if (activity.verb === 'share') {\n      Object.assign(params.qs, {\n        transcode: true,\n        async: false\n      });\n    }\n    /**\n   * helper to cloneDeepWith for copying instance function\n   * @param {Object|String|Symbol|Array|Date} value (recursive value to clone from params)\n   * @returns {Object|null}\n   */\n    // eslint-disable-next-line consistent-return\n    const customActivityCopy = (value) => {\n      const {files} = params.body.object;\n\n      if (files && value && files.items.length > 0 && value.constructor === files.items[0].scr.constructor) {\n        const copySrc = cloneDeep(value);\n\n        copySrc.toJWE = value.toJWE;\n        copySrc.toJSON = value.toJSON;\n\n        return copySrc;\n      }\n    };\n    const cloneActivity = cloneDeepWith(params, customActivityCopy);\n\n    // triggers user-activity to reset logout timer\n    this.webex.trigger('user-activity');\n\n    return this.request(params)\n      .then((res) => res.body)\n      .catch((error) => {\n        // handle when key need to rotate\n        if (error.body && error.body.errorCode === KEY_ROTATION_REQUIRED) {\n          cloneActivity.body.target.defaultActivityEncryptionKeyUrl = null;\n          this.request(cloneActivity);\n        }\n        else if (\n          error.body &&\n    (error.body.errorCode === KEY_ALREADY_ROTATED || error.body.errorCode === ENCRYPTION_KEY_URL_MISMATCH)\n        ) {\n          // handle when key need to update\n          this.webex.request({\n            method: 'GET',\n            api: 'conversation',\n            resource: `conversations/${params.body.target.id}`\n          }).then((res) => {\n            cloneActivity.body.target.defaultActivityEncryptionKeyUrl = res.body.defaultActivityEncryptionkeyUrl;\n            this.request(cloneActivity);\n          });\n        }\n        else {\n          throw error;\n        }\n      });\n  },\n  /**\n   * Remove the avatar from a room\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise}\n   */\n  unassign(conversation, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'unassign',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'content',\n        files: {\n          items: []\n        }\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Update an existing activity\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  update(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'update',\n      target: this.prepareConversation(convoWithUrl),\n      object\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.get(convoWithUrl, {\n      activitiesLimit: 0,\n      includeParticipants: true\n    })\n      .then((c) => this._updateKey(c, key, activity));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve(\n      key || this.webex.internal.encryption.kms.createUnboundKeys({count: 1})\n    )\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n        const params = {\n          verb: 'updateKey',\n          target: this.prepareConversation(convoWithUrl),\n          object: {\n            defaultActivityEncryptionKeyUrl: k.uri,\n            objectType: 'conversation'\n          }\n        };\n\n        // Reminder: the kmsResourceObjectUrl is only usable if there is\n        // defaultActivityEncryptionKeyUrl.\n        // Valid defaultActivityEncryptionKeyUrl start with 'kms:'\n        if (\n          convoWithUrl.kmsResourceObjectUrl &&\n          convoWithUrl.kmsResourceObjectUrl.startsWith('kms:')\n        ) {\n          params.kmsMessage = {\n            method: 'update',\n            resourceUri: '<KRO>',\n            uri: k.uri\n          };\n        }\n        else {\n          params.kmsMessage = {\n            method: 'create',\n            uri: '/resources',\n            userIds: map(convoWithUrl.participants.items, 'id'),\n            keyUris: [\n              k.uri\n            ]\n          };\n        }\n\n        return this.prepare(activity, params)\n          .then((a) => this.submit(a));\n      });\n  },\n\n  /**\n   * @param {Object} payload\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _create(payload, options = {}) {\n    return this.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'conversations',\n      body: payload,\n      qs: {\n        forceCreate: options.allowPartialCreation\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createGrouped(params, options) {\n    return this._create(this._prepareConversationForCreation(params), options);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createOneOnOne(params) {\n    const payload = this._prepareConversationForCreation(params);\n\n    payload.tags = ['ONE_ON_ONE'];\n\n    return this._create(payload);\n  },\n\n  /**\n   * Get the current conversation url.\n   *\n   * @returns {Promise<string>} - conversation url\n   */\n  getConversationUrl() {\n    this.logger.info('conversation: getting the conversation service url');\n\n    const convoUrl = this.webex.internal.services.get('conversation');\n\n    // Validate if the conversation url exists in the services plugin and\n    // resolve with its value.\n    if (convoUrl) {\n      return Promise.resolve(convoUrl);\n    }\n\n    // Wait for the postauth catalog to update and then try to retrieve the\n    // conversation service url again.\n    return this.webex.internal.waitForCatalog('postauth')\n      .then(() => this.webex.internal.services.get('conversation'))\n      .catch((error) => {\n        this.logger.warn(\n          'conversation: unable to get conversation url',\n          error.message\n        );\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _inferConversationUrl(conversation) {\n    if (conversation.id) {\n      return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n        .then((haMessagingEnabled) => {\n          if (haMessagingEnabled) {\n            // recompute conversation URL each time as the host may have changed\n            // since last usage\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n\n                return conversation;\n              });\n          }\n          if (!conversation.url) {\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n                /* istanbul ignore else */\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.warn('conversation: inferred conversation url from conversation id; please pass whole conversation objects to Conversation methods');\n                }\n\n                return conversation;\n              });\n          }\n\n          return Promise.resolve(conversation);\n        });\n    }\n\n    return Promise.resolve(conversation);\n  },\n\n  /**\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @param {String} options.resource The URL resource to hit for a list of objects\n   * @private\n   * @returns {Promise<Array<Activity>>}\n   */\n  _listActivities(options) {\n    const id = options.conversationId;\n    const url = this.getConvoUrl({url: options.conversationUrl, id});\n    const {resource} = options;\n\n    return this._list({\n      qs: omit(options, 'resource'),\n      url: `${url}/${resource}`\n    });\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Conversation>>}\n   */\n  async _list(options) {\n    options.qs = Object.assign({\n      personRefresh: true,\n      uuidEntryFormat: true,\n      activitiesLimit: 0,\n      participantsLimit: 0\n    }, options.qs);\n\n    const res = await this.request(options);\n\n    let list;\n\n    if (!res.body || !res.body.items || res.body.items.length === 0) {\n      list = [];\n    }\n    else {\n      list = res.body.items.slice(0);\n      if (last(list).published < list[0].published) {\n        list.reverse();\n      }\n    }\n\n    // The user has more data in another cluster.\n    // Follow the 'additionalUrls' for that data.\n    if (res.body.additionalUrls) {\n      let limit = 0;\n\n      // If the user asked for a specific amount of data,\n      // don't fetch more than what was asked.\n      // Here we figure out how much is left from the original request.\n      // Divide that by the number of additional URLS.\n      // This won't get us the exact limit but it will retrieve something\n      // from every cluster listed.\n      if (options.limit) {\n        limit = Math.floor(\n          (options.limit.value - list.length) / res.body.additionalUrls.length\n        );\n      }\n\n      // If the limit is 0 for some reason,\n      // don't bother requesting from other clusters\n      if (!options.limit || limit !== 0) {\n        const results = await Promise.all(\n          res.body.additionalUrls.map((host) => {\n            const url = `${host}/${options.resource}`;\n            const newOptions = Object.assign({}, options, {uri: url, url});\n\n            if (options.limit) {\n              newOptions.qs[newOptions.limit.name] = limit;\n            }\n\n            return this.request(newOptions);\n          })\n        );\n\n        for (const result of results) {\n          if (result.body && result.body.items && result.body.items.length) {\n            const {items} = result.body;\n\n            if (last(items).published < items[0].published) {\n              items.reverse();\n            }\n            list = list.concat(items);\n          }\n        }\n      }\n    }\n\n    await Promise.all(list.map((item) => this._recordUUIDs(item)));\n\n    return list;\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Conversation>}\n   */\n  _maybeCreateOneOnOneThenPost(params, options) {\n    return this.get(defaults({\n      // the use of uniq in Conversation#create guarantees participant[1] will\n      // always be the other user\n      user: params.participants[1]\n    }), Object.assign(options, {includeConvWithDeletedUserUUID: true, includeParticipants: true}))\n      .then((conversation) => {\n        if (params.comment || params.html) {\n          return this.post(conversation, {content: params.html, displayName: params.comment})\n            .then((activity) => {\n              conversation.activities.items.push(activity);\n\n              return conversation;\n            });\n        }\n\n        return conversation;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 404) {\n          return Promise.reject(reason);\n        }\n\n        return this._createOneOnOne(params);\n      });\n  },\n\n  /**\n   * @param {Object} params\n   * @private\n   * @returns {Object}\n   */\n  _prepareConversationForCreation(params) {\n    const payload = {\n      activities: {\n        items: [\n          this.expand('create')\n        ]\n      },\n      objectType: 'conversation',\n      kmsMessage: {\n        method: 'create',\n        uri: '/resources',\n        userIds: cloneDeep(params.participants),\n        keyUris: []\n      }\n    };\n\n    if (params.displayName) {\n      payload.displayName = params.displayName;\n    }\n\n    params.participants.forEach((participant) => {\n      payload.activities.items.push(this.expand('add', {\n        objectType: 'person',\n        id: participant\n      }));\n    });\n\n    if (params.comment) {\n      payload.activities.items.push(this.expand('post', {\n        objectType: 'comment',\n        content: params.html,\n        displayName: params.comment\n      }));\n    }\n\n    return payload;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _recordUUIDs(conversation) {\n    if (!conversation.participants || !conversation.participants.items) {\n      return Promise.resolve(conversation);\n    }\n\n    return Promise.all(conversation.participants.items.map((participant) => {\n      // ROOMs or LYRA_SPACEs do not have email addresses, so there's no point attempting to\n      // record their UUIDs.\n      if (participant.type === 'ROOM' || participant.type === 'LYRA_SPACE') {\n        return Promise.resolve();\n      }\n\n      return this.webex.internal.user.recordUUID(participant)\n        .catch((err) => this.logger.warn('Could not record uuid', err));\n    }));\n  }\n});\n\n[\n  'favorite',\n  'hide',\n  'lock',\n  'mute',\n  'unfavorite',\n  'unhide',\n  'unlock',\n  'unmute'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitSimpleActivity(conversation, activity) {\n    const convoWithUrl =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      object: convoWithUrl,\n      target: convoWithUrl\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'assignModerator',\n  'unassignModerator'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitModerationChangeActivity(conversation, moderator, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.all([\n      convoWithUrl,\n      moderator ? this.webex.internal.user.asUUID(moderator) : this.webex.internal.device.userId\n    ])\n      .then(([c, userId]) => this.prepare(activity, {\n        verb,\n        target: this.prepareConversation(c),\n        object: {\n          id: userId,\n          objectType: 'person'\n        }\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n/**\n * Sets/unsets space property for convo\n * @param {Object} conversation\n * @param {string} tag\n * @param {Activity} activity\n * @returns {Promise<Activity>}\n */\n[\n  'setSpaceProperty',\n  'unsetSpaceProperty'\n].forEach((fnName) => {\n  const verb = fnName.startsWith('set') ? 'set' : 'unset';\n\n  Conversation.prototype[fnName] = function submitSpacePropertyActivity(conversation, tag, activity) {\n    if (!isString(tag)) {\n      return Promise.reject(new Error('`tag` must be a string'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        tags: [tag],\n        objectType: 'spaceProperty'\n      }\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'tag',\n  'untag'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitObjectActivity(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const c =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: c,\n      object: Object.assign(c, object)\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\nexport default Conversation;\n"]}