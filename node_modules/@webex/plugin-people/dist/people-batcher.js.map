{"version":3,"sources":["people-batcher.js"],"names":["PersonUUIDRequestBatcher","Batcher","extend","namespace","handleHttpSuccess","res","promises","body","items","map","personResponse","handleItemSuccess","id","notFoundIds","concat","handleItemFailure","all","getDeferredForResponse","then","defer","reject","email","response","resolve","fingerprintRequest","uuidOrHydraId","hydraId","webex","people","inferPersonIdFromUuid","fingerprintResponse","prepareRequest","ids","join","submitHttpRequest","request","service","resource","config","showAllTypes"],"mappings":";;;;;;;;;;AAIA;;;;AAEA;;;;AAIA,IAAMA,2BAA2BC,mBAAQC,MAAR,CAAe;AAC9CC,aAAW,QADmC;;AAG9C;;;;;;AAMAC,mBAT8C,6BAS5BC,GAT4B,EASvB;AAAA;;AACrB,QAAMC,WAAWD,IAAIE,IAAJ,CAASC,KAAT,CAAeC,GAAf,CAAmB,UAACC,cAAD;AAAA,aAClC,MAAKC,iBAAL,CAAuBD,eAAeE,EAAtC,EAA0CF,cAA1C,CADkC;AAAA,KAAnB,CAAjB;;AAGA,QAAIL,IAAIE,IAAJ,CAASM,WAAb,EAA0B;AACxBP,eAASQ,MAAT,CAAgBT,IAAIE,IAAJ,CAASM,WAAT,CAAqBJ,GAArB,CAAyB,UAACG,EAAD;AAAA,eACvC,MAAKG,iBAAL,CAAuBH,EAAvB,CADuC;AAAA,OAAzB,CAAhB;AAED;;AAED,WAAO,kBAAQI,GAAR,CAAYV,QAAZ,CAAP;AACD,GAnB6C;AAqB9CS,mBArB8C,6BAqB5BH,EArB4B,EAqBxB;AACpB,WAAO,KAAKK,sBAAL,CAA4BL,EAA5B,EACJM,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAMC,MAAN,CAAaR,EAAb;AACD,KAHI,CAAP;AAID,GA1B6C;;;AA4B9C;;;;;;;AAOAD,mBAnC8C,6BAmC5BU,KAnC4B,EAmCrBC,QAnCqB,EAmCX;AACjC,WAAO,KAAKL,sBAAL,CAA4BI,KAA5B,EACJH,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAMI,OAAN,CAAcD,QAAd;AACD,KAHI,CAAP;AAID,GAxC6C;;;AA0C9C;;;;;;AAMAE,oBAhD8C,8BAgD3BC,aAhD2B,EAgDZ;AAChC,QAAMC,UAAU,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,qBAAlB,CAAwCJ,aAAxC,CAAhB;;AAEA,WAAO,kBAAQF,OAAR,CAAgBG,OAAhB,CAAP;AACD,GApD6C;;;AAsD9C;;;;;;AAMAI,qBA5D8C,+BA4D1BJ,OA5D0B,EA4DjB;AAC3B,WAAO,kBAAQH,OAAR,CAAgBG,OAAhB,CAAP;AACD,GA9D6C;AAgE9CK,gBAhE8C,0BAgE/BC,GAhE+B,EAgE1B;AAClB,WAAO,kBAAQT,OAAR,CAAgBS,IAAIC,IAAJ,EAAhB,CAAP;AACD,GAlE6C;;;AAoE9C;;;;;;AAMAC,mBA1E8C,6BA0E5BF,GA1E4B,EA0EvB;AACrB,WAAO,KAAKL,KAAL,CAAWQ,OAAX,CAAmB;AACxBC,eAAS,OADe;AAExBC,gCAAwBL,GAAxB,sBAA4C,KAAKM,MAAL,CAAYC;AAFhC,KAAnB,CAAP;AAID;AA/E6C,CAAf,CAAjC,C,CAVA;;;;kBA4FevC,wB","file":"people-batcher.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Batcher} from '@webex/webex-core';\n\n/**\n * @class\n * @ignore\n */\nconst PersonUUIDRequestBatcher = Batcher.extend({\n  namespace: 'People',\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {HttpResponseObject} res\n   * @returns {Promise}\n   */\n  handleHttpSuccess(res) {\n    const promises = res.body.items.map((personResponse) =>\n      this.handleItemSuccess(personResponse.id, personResponse));\n\n    if (res.body.notFoundIds) {\n      promises.concat(res.body.notFoundIds.map((id) =>\n        this.handleItemFailure(id)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  handleItemFailure(id) {\n    return this.getDeferredForResponse(id)\n      .then((defer) => {\n        defer.reject(id);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} email\n   * @param {Object} response\n   * @returns {Promise}\n   */\n  handleItemSuccess(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.resolve(response);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} uuidOrHydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintRequest(uuidOrHydraId) {\n    const hydraId = this.webex.people.inferPersonIdFromUuid(uuidOrHydraId);\n\n    return Promise.resolve(hydraId);\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} hydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintResponse(hydraId) {\n    return Promise.resolve(hydraId);\n  },\n\n  prepareRequest(ids) {\n    return Promise.resolve(ids.join());\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {Object} ids\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest(ids) {\n    return this.webex.request({\n      service: 'hydra',\n      resource: `people/?id=${ids}&showAllTypes=${this.config.showAllTypes}`\n    });\n  }\n});\n\nexport default PersonUUIDRequestBatcher;\n"]}